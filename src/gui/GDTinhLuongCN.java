/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package gui;

import dao.BangChamCongCongNhan_DAO;
import dao.BangLuongCongNhan_DAO;
import dao.CongNhan_DAO;
import entity.BangChamCongCongNhan;
import entity.BangLuongCongNhan;
import entity.CongNhan;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.FileOutputStream;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.Month;
import java.time.YearMonth;
import java.util.ArrayList;
import java.util.Calendar;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.DocumentListener;
import javax.swing.event.UndoableEditListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.Element;
import javax.swing.text.Position;
import javax.swing.text.Segment;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;
import dao.BangChamCongCongNhan_DAO;
import dao.BangLuongCongNhan_DAO;
import dao.BangPhanCong_DAO;
import dao.ChiTietBangChamCong_DAO;
import dao.CongDoan_DAO;
import dao.CongNhan_DAO;
import dao.HopDong_DAO;
import entity.BangChamCongCongNhan;
import entity.BangPhanCong;
import entity.ChiTietBangChamCong;
import entity.CongDoan;
import entity.CongNhan;
import entity.HopDong;
import entity.SanPham;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.NumberFormat;
import java.time.Duration;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.SwingConstants;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author acer
 */
public class GDTinhLuongCN extends javax.swing.JPanel {

    /**
     * Creates new form GDTinhLuongCN
     */
    public GDTinhLuongCN() {
        initComponents();
        bangChamCong_dao = new BangChamCongCongNhan_DAO();
        bangLuongCongNhan_dao = new BangLuongCongNhan_DAO();
        chiTietBangChamCong_DAO = new ChiTietBangChamCong_DAO();
        bangPhanCong_DAO = new BangPhanCong_DAO();
        congDoan_DAO = new CongDoan_DAO();
        congNhan_dao = new CongNhan_DAO();
        dsAllBangLuong = bangLuongCongNhan_dao.getAllBangLuongCongNhan();
        dsCongNhan = congNhan_dao.getAllCongNhan();
        dsCongNhanTmp = new ArrayList<CongNhan>();
        dsBangChamCong = bangChamCong_dao.getAllBangChamCongCongNhan();
        dsAllBangPhanCong = bangPhanCong_DAO.getAllBangPhanCong();
        dsAllCTChamCong = chiTietBangChamCong_DAO.getAllChiTietBangChamCongVer2();
        dateTimeFormatter = DateTimeFormatter.ofPattern("dd-MM-yyyy"); //format ngày
        dstienUng = new HashMap<String, Double>(); //Lưu ds tiền ứng
        loadComponentsTableCN();
        loadComponentsTableBangChamCong();
        loadComponentsTableBangLuong();
        resetHashMapAndPhongBan();
        resetTableCN(dsCongNhan);
        jButtonPDF.setMnemonic(KeyEvent.VK_S);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pTinhLuongNV = new javax.swing.JPanel();
        pTittle = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        pTongQuan = new javax.swing.JPanel();
        jPanelThongTinLuong = new javax.swing.JPanel();
        jLabelTenCN = new javax.swing.JLabel();
        jTextFieldTenCN = new javax.swing.JTextField();
        jLabelNgayTinhLuong = new javax.swing.JLabel();
        jTextFieldNgayTinhLuong = new javax.swing.JTextField();
        jLabelSoNgayLam = new javax.swing.JLabel();
        jTextFieldSoNgayLam = new javax.swing.JTextField();
        jLabelSoNgayNghi = new javax.swing.JLabel();
        jTextFieldSoNgayNghi = new javax.swing.JTextField();
        jLabelLuongSP = new javax.swing.JLabel();
        jTextFieldLuongSP = new javax.swing.JTextField();
        jTextFieldTangCa = new javax.swing.JTextField();
        jLabelTangCa = new javax.swing.JLabel();
        jLabelTienUng = new javax.swing.JLabel();
        jTextFieldTienUng = new javax.swing.JTextField();
        jLabelPhuCap = new javax.swing.JLabel();
        jTextFieldPhuCap = new javax.swing.JTextField();
        jLabelChuyenCan = new javax.swing.JLabel();
        jTextFieldChuyenCan = new javax.swing.JTextField();
        jLabelBHXH = new javax.swing.JLabel();
        jTextFieldBHXH = new javax.swing.JTextField();
        jTextFieldThucLanh = new javax.swing.JTextField();
        jLabelThucLanh = new javax.swing.JLabel();
        jPanelDSCN = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableCN = new javax.swing.JTable();
        jPanelLuong = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableBangLuong = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableBangChamCong = new javax.swing.JTable();
        jButtonTinhLuong = new javax.swing.JButton();
        jButtonPDF = new javax.swing.JButton();
        jComboBoxThang = new javax.swing.JComboBox<>();
        jLabelThang = new javax.swing.JLabel();
        jLabelNam = new javax.swing.JLabel();
        jComboBoxNam = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        jTextFieldTimKiem = new javax.swing.JTextField();
        jLabelTimKiem = new javax.swing.JLabel();
        jButtonLamMoi = new javax.swing.JButton();
        jButtonTimKiem = new javax.swing.JButton();

        pTinhLuongNV.setBackground(new java.awt.Color(217, 217, 217));
        pTinhLuongNV.setPreferredSize(new java.awt.Dimension(958, 735));

        pTittle.setBackground(new java.awt.Color(0, 0, 0));

        jLabel15.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(191, 95, 95));
        jLabel15.setText("TÍNH LƯƠNG CÔNG NHÂN");

        javax.swing.GroupLayout pTittleLayout = new javax.swing.GroupLayout(pTittle);
        pTittle.setLayout(pTittleLayout);
        pTittleLayout.setHorizontalGroup(
            pTittleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pTittleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pTittleLayout.setVerticalGroup(
            pTittleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
        );

        pTongQuan.setBackground(new java.awt.Color(217, 217, 217));
        pTongQuan.setRequestFocusEnabled(false);

        jPanelThongTinLuong.setBackground(new java.awt.Color(204, 204, 204));
        jPanelThongTinLuong.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thông tin lương công nhân", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(0, 0, 0))); // NOI18N
        jPanelThongTinLuong.setForeground(new java.awt.Color(0, 0, 0));

        jLabelTenCN.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelTenCN.setForeground(new java.awt.Color(0, 0, 0));
        jLabelTenCN.setText("Tên công nhân:");

        jTextFieldTenCN.setEditable(false);
        jTextFieldTenCN.setBackground(new java.awt.Color(255, 255, 255));
        jTextFieldTenCN.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTextFieldTenCN.setForeground(new java.awt.Color(0, 0, 0));

        jLabelNgayTinhLuong.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNgayTinhLuong.setForeground(new java.awt.Color(0, 0, 0));
        jLabelNgayTinhLuong.setText("Ngày tính lương:");

        jTextFieldNgayTinhLuong.setEditable(false);
        jTextFieldNgayTinhLuong.setBackground(new java.awt.Color(255, 255, 255));
        jTextFieldNgayTinhLuong.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTextFieldNgayTinhLuong.setForeground(new java.awt.Color(0, 0, 0));

        jLabelSoNgayLam.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSoNgayLam.setForeground(new java.awt.Color(0, 0, 0));
        jLabelSoNgayLam.setText("Số ngày làm:");

        jTextFieldSoNgayLam.setEditable(false);
        jTextFieldSoNgayLam.setBackground(new java.awt.Color(255, 255, 255));
        jTextFieldSoNgayLam.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTextFieldSoNgayLam.setForeground(new java.awt.Color(0, 0, 0));

        jLabelSoNgayNghi.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSoNgayNghi.setForeground(new java.awt.Color(0, 0, 0));
        jLabelSoNgayNghi.setText("Số ngày nghỉ:");

        jTextFieldSoNgayNghi.setEditable(false);
        jTextFieldSoNgayNghi.setBackground(new java.awt.Color(255, 255, 255));
        jTextFieldSoNgayNghi.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTextFieldSoNgayNghi.setForeground(new java.awt.Color(0, 0, 0));

        jLabelLuongSP.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelLuongSP.setForeground(new java.awt.Color(0, 0, 0));
        jLabelLuongSP.setText("Lương sản phẩm:");

        jTextFieldLuongSP.setEditable(false);
        jTextFieldLuongSP.setBackground(new java.awt.Color(255, 255, 255));
        jTextFieldLuongSP.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTextFieldLuongSP.setForeground(new java.awt.Color(0, 0, 0));
        jTextFieldLuongSP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldLuongSPActionPerformed(evt);
            }
        });

        jTextFieldTangCa.setEditable(false);
        jTextFieldTangCa.setBackground(new java.awt.Color(255, 255, 255));
        jTextFieldTangCa.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTextFieldTangCa.setForeground(new java.awt.Color(0, 0, 0));

        jLabelTangCa.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelTangCa.setForeground(new java.awt.Color(0, 0, 0));
        jLabelTangCa.setText("Lương tăng ca:");

        jLabelTienUng.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelTienUng.setForeground(new java.awt.Color(0, 0, 0));
        jLabelTienUng.setText("Tiền ứng:");

        jTextFieldTienUng.setBackground(new java.awt.Color(255, 255, 255));
        jTextFieldTienUng.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTextFieldTienUng.setForeground(new java.awt.Color(0, 0, 0));
        jTextFieldTienUng.setText("0");
        jTextFieldTienUng.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldTienUngFocusLost(evt);
            }
        });
        jTextFieldTienUng.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldTienUngActionPerformed(evt);
            }
        });
        jTextFieldTienUng.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldTienUngKeyPressed(evt);
            }
        });

        jLabelPhuCap.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelPhuCap.setForeground(new java.awt.Color(0, 0, 0));
        jLabelPhuCap.setText("Phụ cấp:");

        jTextFieldPhuCap.setEditable(false);
        jTextFieldPhuCap.setBackground(new java.awt.Color(255, 255, 255));
        jTextFieldPhuCap.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTextFieldPhuCap.setForeground(new java.awt.Color(0, 0, 0));

        jLabelChuyenCan.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelChuyenCan.setForeground(new java.awt.Color(0, 0, 0));
        jLabelChuyenCan.setText("Chuyên cần:");

        jTextFieldChuyenCan.setEditable(false);
        jTextFieldChuyenCan.setBackground(new java.awt.Color(255, 255, 255));
        jTextFieldChuyenCan.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTextFieldChuyenCan.setForeground(new java.awt.Color(0, 0, 0));

        jLabelBHXH.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelBHXH.setForeground(new java.awt.Color(0, 0, 0));
        jLabelBHXH.setText("BHXH:");

        jTextFieldBHXH.setEditable(false);
        jTextFieldBHXH.setBackground(new java.awt.Color(255, 255, 255));
        jTextFieldBHXH.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTextFieldBHXH.setForeground(new java.awt.Color(0, 0, 0));

        jTextFieldThucLanh.setEditable(false);
        jTextFieldThucLanh.setBackground(new java.awt.Color(255, 255, 255));
        jTextFieldThucLanh.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTextFieldThucLanh.setForeground(new java.awt.Color(0, 0, 0));

        jLabelThucLanh.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelThucLanh.setForeground(new java.awt.Color(0, 0, 0));
        jLabelThucLanh.setText("Thực lãnh:");

        javax.swing.GroupLayout jPanelThongTinLuongLayout = new javax.swing.GroupLayout(jPanelThongTinLuong);
        jPanelThongTinLuong.setLayout(jPanelThongTinLuongLayout);
        jPanelThongTinLuongLayout.setHorizontalGroup(
            jPanelThongTinLuongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelThongTinLuongLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelThongTinLuongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanelThongTinLuongLayout.createSequentialGroup()
                        .addComponent(jLabelThucLanh)
                        .addGap(71, 71, 71)
                        .addComponent(jTextFieldThucLanh, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelThongTinLuongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanelThongTinLuongLayout.createSequentialGroup()
                            .addComponent(jLabelTenCN)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextFieldTenCN, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanelThongTinLuongLayout.createSequentialGroup()
                            .addComponent(jLabelNgayTinhLuong)
                            .addGap(29, 29, 29)
                            .addComponent(jTextFieldNgayTinhLuong, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanelThongTinLuongLayout.createSequentialGroup()
                            .addComponent(jLabelSoNgayLam)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextFieldSoNgayLam, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanelThongTinLuongLayout.createSequentialGroup()
                            .addComponent(jLabelSoNgayNghi)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextFieldSoNgayNghi, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanelThongTinLuongLayout.createSequentialGroup()
                            .addComponent(jLabelLuongSP)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextFieldLuongSP, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 85, Short.MAX_VALUE)
                .addGroup(jPanelThongTinLuongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelThongTinLuongLayout.createSequentialGroup()
                        .addComponent(jLabelTangCa)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextFieldTangCa, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelThongTinLuongLayout.createSequentialGroup()
                        .addComponent(jLabelTienUng)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextFieldTienUng, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelThongTinLuongLayout.createSequentialGroup()
                        .addComponent(jLabelPhuCap)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextFieldPhuCap, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelThongTinLuongLayout.createSequentialGroup()
                        .addComponent(jLabelChuyenCan)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextFieldChuyenCan, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelThongTinLuongLayout.createSequentialGroup()
                        .addComponent(jLabelBHXH)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextFieldBHXH, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(14, 14, 14))
        );
        jPanelThongTinLuongLayout.setVerticalGroup(
            jPanelThongTinLuongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelThongTinLuongLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelThongTinLuongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelThongTinLuongLayout.createSequentialGroup()
                        .addGroup(jPanelThongTinLuongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldTangCa, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelTangCa))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelThongTinLuongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldTienUng, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelTienUng))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelThongTinLuongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldPhuCap, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelPhuCap))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelThongTinLuongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldChuyenCan, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelChuyenCan))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelThongTinLuongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldBHXH, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelBHXH)))
                    .addGroup(jPanelThongTinLuongLayout.createSequentialGroup()
                        .addGroup(jPanelThongTinLuongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldTenCN, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelTenCN))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelThongTinLuongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldNgayTinhLuong, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelNgayTinhLuong))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelThongTinLuongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldSoNgayLam, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelSoNgayLam))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelThongTinLuongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldSoNgayNghi, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelSoNgayNghi))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelThongTinLuongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldLuongSP, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelLuongSP))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelThongTinLuongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelThucLanh)
                    .addComponent(jTextFieldThucLanh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelDSCN.setBackground(new java.awt.Color(255, 255, 255));
        jPanelDSCN.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Danh sách công nhân", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(0, 0, 0))); // NOI18N
        jPanelDSCN.setForeground(new java.awt.Color(0, 0, 0));

        jTableCN.setBackground(new java.awt.Color(204, 204, 204));
        jTableCN.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTableCN.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTableCN.setForeground(new java.awt.Color(0, 0, 0));
        jTableCN.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Mã nhân viên", "Tên nhân viên"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableCN.setRowHeight(24);
        jTableCN.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jTableCN.setShowHorizontalLines(true);
        jTableCN.setShowVerticalLines(true);
        jTableCN.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableCNMouseClicked(evt);
            }
        });
        jTableCN.addVetoableChangeListener(new java.beans.VetoableChangeListener() {
            public void vetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {
                jTableCNVetoableChange(evt);
            }
        });
        jScrollPane2.setViewportView(jTableCN);

        javax.swing.GroupLayout jPanelDSCNLayout = new javax.swing.GroupLayout(jPanelDSCN);
        jPanelDSCN.setLayout(jPanelDSCNLayout);
        jPanelDSCNLayout.setHorizontalGroup(
            jPanelDSCNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
        );
        jPanelDSCNLayout.setVerticalGroup(
            jPanelDSCNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );

        jPanelLuong.setBackground(new java.awt.Color(204, 204, 204));
        jPanelLuong.setBorder(null);
        jPanelLuong.setForeground(new java.awt.Color(0, 0, 0));

        jTableBangLuong.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jTableBangLuong.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Mã bảng lương", "Tên nhân viên", "Ngày tính lương", "Số ngày làm", "Số ngày nghỉ", "Lương sản phẩm", "Lương tăng ca", "Tiền ứng", "Tiền phụ cấp", "Tiền chuyên cần", "Bảo hiểm xã hội", "Thực lãnh"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableBangLuong.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTableBangLuong.setRowHeight(24);
        jTableBangLuong.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableBangLuongMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTableBangLuong);

        jTabbedPane1.addTab("Lương", jScrollPane3);

        jTableBangChamCong.setBackground(new java.awt.Color(204, 204, 204));
        jTableBangChamCong.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTableBangChamCong.setForeground(new java.awt.Color(0, 0, 0));
        jTableBangChamCong.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Mã bảng chấm công", "Tên NV", "Giờ vào", "Giờ ra", "Ca làm việc"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableBangChamCong.setRowHeight(22);
        jTableBangChamCong.setShowHorizontalLines(true);
        jTableBangChamCong.setShowVerticalLines(true);
        jTableBangChamCong.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableBangChamCongMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableBangChamCong);

        jTabbedPane1.addTab("Chi tiết chấm công", jScrollPane1);

        javax.swing.GroupLayout jPanelLuongLayout = new javax.swing.GroupLayout(jPanelLuong);
        jPanelLuong.setLayout(jPanelLuongLayout);
        jPanelLuongLayout.setHorizontalGroup(
            jPanelLuongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        jPanelLuongLayout.setVerticalGroup(
            jPanelLuongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLuongLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButtonTinhLuong.setBackground(new java.awt.Color(191, 95, 95));
        jButtonTinhLuong.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jButtonTinhLuong.setForeground(new java.awt.Color(255, 255, 255));
        jButtonTinhLuong.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/calculator-solid.png"))); // NOI18N
        jButtonTinhLuong.setMnemonic('T');
        jButtonTinhLuong.setText("Tính lương");
        jButtonTinhLuong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTinhLuongActionPerformed(evt);
            }
        });

        jButtonPDF.setBackground(new java.awt.Color(191, 95, 95));
        jButtonPDF.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jButtonPDF.setForeground(new java.awt.Color(255, 255, 255));
        jButtonPDF.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/file-regular.png"))); // NOI18N
        jButtonPDF.setMnemonic('E');
        jButtonPDF.setText("Xuất Excel");
        jButtonPDF.setToolTipText("");
        jButtonPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPDFActionPerformed(evt);
            }
        });

        jComboBoxThang.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jComboBoxThang.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
        jComboBoxThang.setMaximumSize(new java.awt.Dimension(66, 29));
        jComboBoxThang.setMinimumSize(new java.awt.Dimension(66, 29));
        jComboBoxThang.setPreferredSize(new java.awt.Dimension(66, 29));
        Calendar cal = Calendar.getInstance();
        int currentMonth = cal.get(Calendar.MONTH) + 1;
        jComboBoxThang.setSelectedItem(String.valueOf(currentMonth));
        jComboBoxThang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxThangActionPerformed(evt);
            }
        });

        jLabelThang.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabelThang.setForeground(new java.awt.Color(0, 0, 0));
        jLabelThang.setText("Tháng:");

        jLabelNam.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabelNam.setForeground(new java.awt.Color(0, 0, 0));
        jLabelNam.setText("Năm:");

        jComboBoxNam.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jComboBoxNam.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2023" }));
        jComboBoxNam.setMaximumSize(new java.awt.Dimension(66, 29));
        //Calendar cal = Calendar.getInstance();
        int currentYear = cal.get(Calendar.YEAR);
        jComboBoxNam.setSelectedItem(String.valueOf(currentYear));
        jComboBoxNam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxNamActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tìm kiếm công nhân", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("sansserif", 1, 12), new java.awt.Color(0, 0, 0))); // NOI18N

        jTextFieldTimKiem.setBackground(new java.awt.Color(255, 255, 255));
        jTextFieldTimKiem.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTextFieldTimKiem.setForeground(new java.awt.Color(0, 0, 0));
        jTextFieldTimKiem.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldTimKiemFocusLost(evt);
            }
        });
        jTextFieldTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldTimKiemActionPerformed(evt);
            }
        });
        jTextFieldTimKiem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldTimKiemKeyPressed(evt);
            }
        });

        jLabelTimKiem.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelTimKiem.setForeground(new java.awt.Color(0, 0, 0));
        jLabelTimKiem.setText("Tìm kiếm:");

        jButtonLamMoi.setBackground(new java.awt.Color(191, 95, 95));
        jButtonLamMoi.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jButtonLamMoi.setForeground(new java.awt.Color(255, 255, 255));
        jButtonLamMoi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/arrows-rotate-solid.png"))); // NOI18N
        jButtonLamMoi.setMnemonic('F');
        jButtonLamMoi.setText("Làm mới");
        jButtonLamMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLamMoiActionPerformed(evt);
            }
        });

        jButtonTimKiem.setBackground(new java.awt.Color(191, 95, 95));
        jButtonTimKiem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/magnifying-glass-solid.png"))); // NOI18N
        jButtonTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTimKiemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabelTimKiem)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButtonLamMoi)
                        .addGap(0, 31, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTextFieldTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextFieldTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelTimKiem))
                    .addComponent(jButtonTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(jButtonLamMoi))
        );

        javax.swing.GroupLayout pTongQuanLayout = new javax.swing.GroupLayout(pTongQuan);
        pTongQuan.setLayout(pTongQuanLayout);
        pTongQuanLayout.setHorizontalGroup(
            pTongQuanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pTongQuanLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pTongQuanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanelLuong, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pTongQuanLayout.createSequentialGroup()
                        .addGroup(pTongQuanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pTongQuanLayout.createSequentialGroup()
                                .addComponent(jLabelThang)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxThang, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(38, 38, 38)
                                .addComponent(jLabelNam)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxNam, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonTinhLuong)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonPDF))
                            .addComponent(jPanelThongTinLuong, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGroup(pTongQuanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pTongQuanLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pTongQuanLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanelDSCN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pTongQuanLayout.setVerticalGroup(
            pTongQuanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pTongQuanLayout.createSequentialGroup()
                .addGroup(pTongQuanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pTongQuanLayout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanelDSCN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pTongQuanLayout.createSequentialGroup()
                        .addComponent(jPanelThongTinLuong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pTongQuanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(pTongQuanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jButtonTinhLuong)
                                .addComponent(jButtonPDF)
                                .addComponent(jLabelThang)
                                .addComponent(jComboBoxNam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabelNam))
                            .addGroup(pTongQuanLayout.createSequentialGroup()
                                .addComponent(jComboBoxThang, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(2, 2, 2)))
                        .addComponent(jPanelLuong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pTinhLuongNVLayout = new javax.swing.GroupLayout(pTinhLuongNV);
        pTinhLuongNV.setLayout(pTinhLuongNVLayout);
        pTinhLuongNVLayout.setHorizontalGroup(
            pTinhLuongNVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pTittle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pTongQuan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pTinhLuongNVLayout.setVerticalGroup(
            pTinhLuongNVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pTinhLuongNVLayout.createSequentialGroup()
                .addComponent(pTittle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(pTongQuan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 972, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(pTinhLuongNV, javax.swing.GroupLayout.DEFAULT_SIZE, 972, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 765, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(pTinhLuongNV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 30, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldTienUngFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldTienUngFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldTienUngFocusLost

    private void jTextFieldTienUngActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldTienUngActionPerformed
        // Sự kiện khi nhập tiền ứng cho nv đang được chọn
    }//GEN-LAST:event_jTextFieldTienUngActionPerformed

    private void jTextFieldTienUngKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldTienUngKeyPressed
        // TODO add your handling code here:
        int row = jTableCN.getSelectedRow();
        double tienUng = Double.parseDouble(jTextFieldTienUng.getText());
        String maCN = modelCongNhan.getValueAt(row, 0).toString();
        BangLuongCongNhan bangLuong = timBangLuongTheoMaCNThangNam(stringToInt(jComboBoxThang.getSelectedItem().toString()), stringToInt(jComboBoxNam.getSelectedItem().toString().substring(2, 4)), maCN);
        if (bangLuong == null) {
            JOptionPane.showMessageDialog(null, "Công nhân này không được ứng trước vì chưa có bảng lương nào");
            jTextFieldTienUng.setText("0.0");
            jTextFieldTienUng.requestFocus();
        } else {
            if (tienUng > bangLuong.getThucLanh() / 2) {
                JOptionPane.showMessageDialog(null, "Tiền ứng không được lớn hơn 50% lương của tháng gần nhất\n" + bangLuong.getThucLanh());
                jTextFieldTienUng.requestFocus();
            } else {
                for (int i = 0; i < dstienUng.size(); i++) {
                    dstienUng.put(maCN, tienUng);
                }
            }
        }
    }//GEN-LAST:event_jTextFieldTienUngKeyPressed

    private void jTableCNMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableCNMouseClicked
        // TODO add your handling code here:
        int row = jTableCN.getSelectedRow();
        if (row != -1) {
            //            resetTableBangLuong();
            clearText();
        }
        int coBangLuong = 0;
        for (int i = 0; i < modelBangLuong.getRowCount(); i++) {
            if (modelCongNhan.getValueAt(row, 0).equals(modelBangLuong.getValueAt(i, 0).toString().substring(4, 10))) {
                jTableBangLuong.setRowSelectionInterval(i, i);
                resetTextField();
                coBangLuong = 1;
                break;
            }
        }
        if (coBangLuong == 0) {
            jTableBangLuong.clearSelection();
        }
        resetTableBangChamCong(row);
    }//GEN-LAST:event_jTableCNMouseClicked

    private void jTableBangLuongMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableBangLuongMouseClicked
        // Sự kiện click vào table bảng lương => chọn nv tương ứng bên table nhân viên
        resetTextField();
        String maNV = modelBangLuong.getValueAt(jTableBangLuong.getSelectedRow(), 0).toString().substring(4, 10);
        //        System.out.println("gui.GDTinhLuongNV.jTableBangLuongMouseClicked() " + maNV);
        for (int i = 0; i < modelCongNhan.getRowCount(); i++) {
            if (maNV.equals(modelCongNhan.getValueAt(i, 0).toString())) {
                jTableCN.setRowSelectionInterval(i, i);
                break;
            }
        }
        if (evt.getClickCount() == 2) {
            PrintReviewCN printReviewCN = new PrintReviewCN();
            int i = jTableBangLuong.getSelectedRow();
            Object[] obj = {
                modelBangLuong.getValueAt(i, 0),
                modelBangLuong.getValueAt(i, 1),
                modelBangLuong.getValueAt(i, 2),
                modelBangLuong.getValueAt(i, 3),
                modelBangLuong.getValueAt(i, 4),
                modelBangLuong.getValueAt(i, 5),
                modelBangLuong.getValueAt(i, 6),
                modelBangLuong.getValueAt(i, 7),
                modelBangLuong.getValueAt(i, 8),
                modelBangLuong.getValueAt(i, 9),
                modelBangLuong.getValueAt(i, 10),
                modelBangLuong.getValueAt(i, 11),};
            ArrayList<ChiTietBangChamCong> dsChiTietChamCong = new ArrayList<ChiTietBangChamCong>();
            ArrayList<Object[]> dsCT = new ArrayList<>();
            int rows = jTableBangChamCong.getRowCount();
            for (int j = 0; j < rows; j++) {
                String maBCC = modelBangChamCong.getValueAt(j, 0).toString();
                for (ChiTietBangChamCong chiTiet : dsAllCTChamCong) {
                    if (chiTiet.getBangCC().getMaBangChamCong().equalsIgnoreCase(maBCC)) {
                        dsChiTietChamCong.add(chiTiet);
                    }
                }
            }
            for (ChiTietBangChamCong chiTiet : dsChiTietChamCong) {
                Object[] rowData = {chiTiet.getBangCC().getMaBangChamCong(), chiTiet.getBangCC().getNgayChamCongString(), chiTiet.getBangPC().getCongDoan().getSanPham().getTenSP(), chiTiet.getBangPC().getCongDoan().getTenCD(), chiTiet.getSoLuong()
                };
                dsCT.add(rowData);
            }
            printReviewCN.setGiaTri(obj, dsCT);
            JDialog dialog = new JDialog();
            dialog.setTitle("Print review");
            dialog.getContentPane().add(printReviewCN);
            dialog.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/image/logo.png")));
            dialog.pack();
            dialog.setLocationRelativeTo(null);
            dialog.setVisible(true);
        }
    }//GEN-LAST:event_jTableBangLuongMouseClicked

    private void jButtonTinhLuongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTinhLuongActionPerformed
        // Sự kiện btn tính lương
        int rows = modelCongNhan.getRowCount();
        for (int i = 0; i < rows; i++) {
            //Lấy ra nhân viên hành chính
            CongNhan cn = congNhan_dao.getCongNhanTheoMa(modelCongNhan.getValueAt(i, 0).toString());
            //Thực hiện tính lương
            BangLuongCongNhan bangLuong = tinhLuong(dsBangChamCong, cn);
            //Nếu nv đó có bảng lương trong tháng và năm được chọn thì thêm mới bảng lương
            if (bangLuong != null && timBangLuongTheoMaCN(cn.getMaCN()) == null) {
                dsAllBangLuong.add(bangLuong); //Thêm bảng lương vào ds 
                bangLuongCongNhan_dao.createBangLuongCongNhan(bangLuong); //Thêm vào csdl
            } else if (bangLuong != null && timBangLuongTheoMaCN(cn.getMaCN()) != null) {
//                dsAllBangLuong.remove(timBangLuongTheoMaNV(nv.getMaNV()));
//                dsAllBangLuong.add(bangLuong);
                bangLuongCongNhan_dao.updateBangLuong(bangLuong);
                dsAllBangLuong = bangLuongCongNhan_dao.getAllBangLuongCongNhan();
            }
        }
        //Reset lại table bảng lương
        resetTableBangLuong();
    }//GEN-LAST:event_jButtonTinhLuongActionPerformed

    private void jButtonPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPDFActionPerformed
        // Sự kiện btn in pdf
        try {
            String fileName = "Bảng lương tháng " + jComboBoxThang.getSelectedItem();
            XSSFWorkbook wordkbook = new XSSFWorkbook();
            XSSFSheet sheet = wordkbook.createSheet("Bảng lương");
            XSSFSheet sheet1 = wordkbook.createSheet("Phiếu lương");
            XSSFRow row = null;

            Cell cell = null;
            // Create a font with a bigger size
            XSSFFont font = wordkbook.createFont();
            font.setFontHeightInPoints((short) 14); // Set the font size

            // Create a cell style with center alignment and the bigger font
            XSSFCellStyle style = wordkbook.createCellStyle();
            style.setAlignment(HorizontalAlignment.CENTER);
            style.setFont(font); // Apply the font to the style

            // Create the company name row and merge cells
            row = sheet.createRow(0);
            cell = row.createCell(0, CellType.STRING);
            cell.setCellValue("Công ty TNHH may mặc Thịnh Vượng");
            cell.setCellStyle(style); // Apply the style to the cell
            sheet.addMergedRegion(new CellRangeAddress(0, 0, 0, 12)); // Merge cells from column 0 to 12

            // Create the title row and merge cells
            row = sheet.createRow(1);
            cell = row.createCell(0, CellType.STRING);
            cell.setCellValue(fileName);
            cell.setCellStyle(style); // Apply the style to the cell
            sheet.addMergedRegion(new CellRangeAddress(1, 1, 0, 12)); // Merge cells from column 0 to 12
//            row = sheet.createRow(1);
            row = sheet.createRow(3);
            sheet.setColumnWidth(0, 3 * 256);
            cell = row.createCell(0, CellType.STRING);
            cell.setCellValue("STT");

            sheet.setColumnWidth(1, 20 * 256);
            cell = row.createCell(1, CellType.STRING);
            cell.setCellValue("Tên công nhân");

            sheet.setColumnWidth(2, 15 * 256);
            cell = row.createCell(2, CellType.STRING);
            cell.setCellValue("Ngày tính lương");

            sheet.setColumnWidth(3, 15 * 256);
            cell = row.createCell(3, CellType.STRING);
            cell.setCellValue("Số ngày làm");

            sheet.setColumnWidth(4, 15 * 256);
            cell = row.createCell(4, CellType.STRING);
            cell.setCellValue("Số ngày nghỉ");

            sheet.setColumnWidth(5, 14 * 256);
            cell = row.createCell(5, CellType.STRING);
            cell.setCellValue("Lương sản phẩm");

            sheet.setColumnWidth(6, 13 * 256);
            cell = row.createCell(6, CellType.STRING);
            cell.setCellValue("Lương tăng ca");

            sheet.setColumnWidth(7, 12 * 256);
            cell = row.createCell(7, CellType.STRING);
            cell.setCellValue("Tiền ứng");

            sheet.setColumnWidth(8, 12 * 256);
            cell = row.createCell(8, CellType.STRING);
            cell.setCellValue("Tiền phụ cấp");

            sheet.setColumnWidth(9, 15 * 256);
            cell = row.createCell(9, CellType.STRING);
            cell.setCellValue("Tiền chuyên cần");

            sheet.setColumnWidth(10, 15 * 256);
            cell = row.createCell(10, CellType.STRING);
            cell.setCellValue("Bảo hiểm xã hội");

            sheet.setColumnWidth(11, 12 * 256);
            cell = row.createCell(11, CellType.STRING);
            cell.setCellValue("Thực lãnh");

            sheet.setColumnWidth(12, 8 * 256);
            cell = row.createCell(12, CellType.STRING);
            cell.setCellValue("Ghi chú");
            int count1 = 0;
            int rows = jTableBangLuong.getRowCount();
            for (int i = 0; i < rows; i++) {
                Object[] obj = {modelBangLuong.getValueAt(i, 1),
                    modelBangLuong.getValueAt(i, 2),
                    modelBangLuong.getValueAt(i, 3),
                    modelBangLuong.getValueAt(i, 4),
                    modelBangLuong.getValueAt(i, 5),
                    modelBangLuong.getValueAt(i, 6),
                    modelBangLuong.getValueAt(i, 7),
                    modelBangLuong.getValueAt(i, 8),
                    modelBangLuong.getValueAt(i, 9),
                    modelBangLuong.getValueAt(i, 10),
                    modelBangLuong.getValueAt(i, 11),};

                row = sheet.createRow(4 + i);

                cell = row.createCell(0, CellType.NUMERIC);
                cell.setCellValue(i + 1);

                cell = row.createCell(1, CellType.STRING);
                cell.setCellValue(obj[0].toString());

                cell = row.createCell(2, CellType.STRING);
                cell.setCellValue(obj[1].toString());

                cell = row.createCell(3, CellType.STRING);
                cell.setCellValue(obj[2].toString());

                cell = row.createCell(4, CellType.STRING);
                cell.setCellValue(obj[3].toString());

                cell = row.createCell(5, CellType.STRING);
                cell.setCellValue(obj[4].toString());

                cell = row.createCell(6, CellType.STRING);
                cell.setCellValue(obj[5].toString());

                cell = row.createCell(7, CellType.STRING);
                cell.setCellValue(obj[6].toString());

                cell = row.createCell(8, CellType.STRING);
                cell.setCellValue(obj[7].toString());

                cell = row.createCell(9, CellType.STRING);
                cell.setCellValue(obj[8].toString());

                cell = row.createCell(10, CellType.STRING);
                cell.setCellValue(obj[9].toString());

                cell = row.createCell(11, CellType.STRING);
                cell.setCellValue(obj[10].toString());

                //Tao bang luong cho moi nv
                // Create the company name row and merge cells
                row = sheet1.createRow(count1);
                cell = row.createCell(0, CellType.STRING);
                cell.setCellValue("Công ty TNHH may mặc Thịnh Vượng");
                cell.setCellStyle(style); // Apply the style to the cell
                sheet1.addMergedRegion(new CellRangeAddress(count1, count1, 0, 12)); // Merge cells from column 0 to 12
                count1++;
                // Create the title row and merge cells
                row = sheet1.createRow(count1);
                cell = row.createCell(0, CellType.STRING);
                cell.setCellValue(fileName);
                cell.setCellStyle(style); // Apply the style to the cell
                sheet1.addMergedRegion(new CellRangeAddress(count1, count1, 0, 12)); // Merge cells from column 0 to 12
                count1 += 2;
                row = sheet1.createRow(count1);
                sheet1.setColumnWidth(0, 3 * 256);
                cell = row.createCell(0, CellType.STRING);
                cell.setCellValue("STT");

                sheet1.setColumnWidth(1, 20 * 256);
                cell = row.createCell(1, CellType.STRING);
                cell.setCellValue("Tên công nhân");

                sheet1.setColumnWidth(2, 15 * 256);
                cell = row.createCell(2, CellType.STRING);
                cell.setCellValue("Ngày tính lương");

                sheet1.setColumnWidth(3, 15 * 256);
                cell = row.createCell(3, CellType.STRING);
                cell.setCellValue("Số ngày làm");

                sheet1.setColumnWidth(4, 15 * 256);
                cell = row.createCell(4, CellType.STRING);
                cell.setCellValue("Số ngày nghỉ");

                sheet1.setColumnWidth(5, 14 * 256);
                cell = row.createCell(5, CellType.STRING);
                cell.setCellValue("Lương sản phẩm");

                sheet1.setColumnWidth(6, 13 * 256);
                cell = row.createCell(6, CellType.STRING);
                cell.setCellValue("Lương tăng ca");

                sheet1.setColumnWidth(7, 12 * 256);
                cell = row.createCell(7, CellType.STRING);
                cell.setCellValue("Tiền ứng");

                sheet1.setColumnWidth(8, 12 * 256);
                cell = row.createCell(8, CellType.STRING);
                cell.setCellValue("Tiền phụ cấp");

                sheet1.setColumnWidth(9, 15 * 256);
                cell = row.createCell(9, CellType.STRING);
                cell.setCellValue("Tiền chuyên cần");

                sheet1.setColumnWidth(10, 15 * 256);
                cell = row.createCell(10, CellType.STRING);
                cell.setCellValue("Bảo hiểm xã hội");

                sheet1.setColumnWidth(11, 12 * 256);
                cell = row.createCell(11, CellType.STRING);
                cell.setCellValue("Thực lãnh");

                sheet1.setColumnWidth(12, 8 * 256);
                cell = row.createCell(12, CellType.STRING);
                cell.setCellValue("Ghi chú");

                count1++;
                row = sheet1.createRow(count1);

                cell = row.createCell(0, CellType.NUMERIC);
                cell.setCellValue(i + 1);

                cell = row.createCell(1, CellType.STRING);
                cell.setCellValue(obj[0].toString());

                cell = row.createCell(2, CellType.STRING);
                cell.setCellValue(obj[1].toString());

                cell = row.createCell(3, CellType.STRING);
                cell.setCellValue(obj[2].toString());

                cell = row.createCell(4, CellType.STRING);
                cell.setCellValue(obj[3].toString());

                cell = row.createCell(5, CellType.STRING);
                cell.setCellValue(obj[4].toString());

                cell = row.createCell(6, CellType.STRING);
                cell.setCellValue(obj[5].toString());

                cell = row.createCell(7, CellType.STRING);
                cell.setCellValue(obj[6].toString());

                cell = row.createCell(8, CellType.STRING);
                cell.setCellValue(obj[7].toString());

                cell = row.createCell(9, CellType.STRING);
                cell.setCellValue(obj[8].toString());

                cell = row.createCell(10, CellType.STRING);
                cell.setCellValue(obj[9].toString());

                cell = row.createCell(11, CellType.STRING);
                cell.setCellValue(obj[10].toString());
                count1 += 2;
            }

            File f = new File("D://" + fileName + ".xlsx");
            try {
                FileOutputStream fis = new FileOutputStream(f);
                wordkbook.write(fis);
                fis.close();
            } catch (FileNotFoundException ex) {
                ex.printStackTrace();

            } catch (IOException ex) {
                ex.printStackTrace();
            }
            JOptionPane.showMessageDialog(this, "Xuất file thành công");
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lõi mở file");
        }
    }//GEN-LAST:event_jButtonPDFActionPerformed

    private void jComboBoxThangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxThangActionPerformed
        //Sự kiện combobox tháng, khi nhấn vào 1 tháng thì reset lại bảng lương và bảng chấm công
        resetTableCN(dsCongNhan);
    }//GEN-LAST:event_jComboBoxThangActionPerformed

    private void jComboBoxNamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxNamActionPerformed
        //Sự kiện combobox tháng, khi nhấn vào 1 tháng thì reset lại bảng lương và bảng chấm công
        resetTableCN(dsCongNhan);
    }//GEN-LAST:event_jComboBoxNamActionPerformed

    private void jTextFieldTimKiemFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldTimKiemFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldTimKiemFocusLost

    private void jTextFieldTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldTimKiemActionPerformed
        // TODO add your handling code here:
        jButtonTimKiem.doClick();
    }//GEN-LAST:event_jTextFieldTimKiemActionPerformed

    private void jTextFieldTimKiemKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldTimKiemKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldTimKiemKeyPressed

    private void jButtonLamMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLamMoiActionPerformed
        // TODO add your handling code here:
        //        modelCongNhan.setRowCount(ABORT);
//        resetTableCN(dsCongNhan);
        jTextFieldTimKiem.setText("");
        resetTableCN(dsCongNhan);
        clearText();
    }//GEN-LAST:event_jButtonLamMoiActionPerformed

    private void jTextFieldLuongSPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldLuongSPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldLuongSPActionPerformed

    private void jButtonTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTimKiemActionPerformed
        // TODO add your handling code here:
        ArrayList<CongNhan> ds = new ArrayList<CongNhan>();
//        String stringTimKiem = jTextFieldTimKiem.getText().trim();
        Pattern pattern = Pattern.compile(jTextFieldTimKiem.getText(), Pattern.CASE_INSENSITIVE);
        for (CongNhan cn : dsCongNhan) {
            Matcher matcher = pattern.matcher(cn.getMaCN());
            if (matcher.find()) {
//                System.out.println("Match found: " + str);
                ds.add(cn);
            }
            matcher = pattern.matcher(cn.getHoTen());
            if (matcher.find()) {
//                System.out.println("Match found: " + str);
                ds.add(cn);
            }
        }
        resetTableCN(ds);
        //        resetTableBangLuong();
        //        resetTableBangChamCong(-1);
    }//GEN-LAST:event_jButtonTimKiemActionPerformed

    private void jTableBangChamCongMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableBangChamCongMouseClicked
        // TODO add your handling code here:
        JDialog dialog = new JDialog();
        ArrayList<ChiTietBangChamCong> dsChiTietChamCong = new ArrayList<ChiTietBangChamCong>();
//        int rows = jTableBangChamCong.getRowCount();
//        for (int i = 0; i < rows; i++) {
            String maBCC = modelBangChamCong.getValueAt(jTableBangChamCong.getSelectedRow(), 0).toString();
            for (ChiTietBangChamCong chiTiet : dsAllCTChamCong) {
                if (chiTiet.getBangCC().getMaBangChamCong().equalsIgnoreCase(maBCC)) {
                    dsChiTietChamCong.add(chiTiet);
                }
            }
//        }
        dialog.setTitle("Danh sách chi tiết chấm công");
        dialog.setSize(600, 300);
        dialog.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/image/logo.png")));

        // Tạo JTable
        String[] columnNames = {"Mã chấm công", "Ngày chấm", "Sản phẩm", "Công đoạn", "Số lượng"};
        DefaultTableModel tableModel = new DefaultTableModel(columnNames, 0);
        JTable table = new JTable(tableModel);

        // Thêm dữ liệu từ dsChiTietChamCong vào JTable
        for (ChiTietBangChamCong chiTiet : dsChiTietChamCong) {
            Object[] rowData = {chiTiet.getBangCC().getMaBangChamCong(), chiTiet.getBangCC().getNgayChamCongString(), chiTiet.getBangPC().getCongDoan().getSanPham().getTenSP(), chiTiet.getBangPC().getCongDoan().getTenCD(), chiTiet.getSoLuong()
            };
            tableModel.addRow(rowData);
        }
        // Thêm JTable vào JDialog
        JScrollPane scrollPane = new JScrollPane(table);
        dialog.add(scrollPane);

        // Hiển thị JDialog
        dialog.setLocationRelativeTo(null);
        dialog.setVisible(true);
    }//GEN-LAST:event_jTableBangChamCongMouseClicked

    private void jTableCNVetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {//GEN-FIRST:event_jTableCNVetoableChange
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableCNVetoableChange

    //Load model table công nhân
    void loadComponentsTableCN() {
        modelCongNhan = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                // all cells false
                return false;
            }
        };
        modelCongNhan.addColumn("Mã CN");
        modelCongNhan.addColumn("Tên CN");
        jTableCN.setModel(modelCongNhan);
        jTableCN.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    int selectedRow = jTableCN.getSelectedRow();
                }
            }
        });
    }

    //Load model của table bảng chấm công 
    void loadComponentsTableBangChamCong() {
        String[] headers = {"Mã bảng chấm công", "Giờ vào", "Giờ ra", "Ngày chấm công", "Ca làm việc"};
        modelBangChamCong = new DefaultTableModel(headers, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                // all cells false
                return false;
            }
        };
        jTableBangChamCong.setModel(modelBangChamCong);
    }

    //Load model của table bảng lương
    void loadComponentsTableBangLuong() {
        String[] headers = {"Mã bảng lương", "Tên nhân viên", "Ngày tính lương", "Số ngày làm", "Số ngày nghỉ", "Lương chính", "Lương tăng ca", "Tiền ứng", "Tiền phụ cấp", "Tiền chuyên cần", "BHXH", "Thực lãnh"};
        modelBangLuong = new DefaultTableModel(headers, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                // all cells false
                return false;
            }
        };
        jTableBangLuong.setModel(modelBangLuong);
    }

    //reset model nhân viên 
    void resetTableCN(ArrayList<CongNhan> ds) {
        boolean isEqual = ds.equals(dsCongNhanTmp);
        modelCongNhan.setRowCount(0);
        for (CongNhan cn : ds) {
            if (checkBCCNV(cn.getMaCN())) {
                Object[] arr = {cn.getMaCN(), cn.getHoTen(), false};
                modelCongNhan.addRow(arr);
            }
        }
        if (jTableCN.getRowCount() > 0) {
            resetTableBangChamCong(0);

        } else {
            resetTableBangChamCong(-1);
        }
        resetTableBangLuong();
        clearText();
    }

    //reset table bang chấm công theo nhân viên đang được chọn 
    void resetTableBangChamCong(int row) {
        if (row != -1) { //Nếu có nhân viên được chọn
            CongNhan cn = timCNTheoMaCN(modelCongNhan.getValueAt(row, 0).toString());
            String month = jComboBoxThang.getSelectedItem().toString().trim();
            String year = jComboBoxNam.getSelectedItem().toString().trim();
            modelBangChamCong.setRowCount(0);
            //Lấy ra danh sách bảng chấm công tháng đó của nhân viên được chọn trên table
            for (BangChamCongCongNhan bcc : dsBangChamCong) {
                if (bcc.getCn().getMaCN().equalsIgnoreCase(cn.getMaCN())
                        && bcc.getNgayChamCong().getMonthValue() == stringToInt(month)
                        && bcc.getNgayChamCong().getYear() == stringToInt(year)) {
                    Object[] arr = {bcc.getMaBangChamCong(), bcc.getGioVao().toString(), bcc.getGioRa().toString(), bcc.getNgayChamCong().format(dateTimeFormatter), bcc.getCaLamViec()};
                    modelBangChamCong.addRow(arr);
                }
            }
        } else {
            modelBangChamCong.setRowCount(0);
        }
    }

    //reset table lương theo các nhân viên đang được chọn 
    void resetTableBangLuong() {
        modelBangLuong.setRowCount(0); //reset model bảng lương
        String month = jComboBoxThang.getSelectedItem().toString().trim(); //Lấy ra tháng
        String year = jComboBoxNam.getSelectedItem().toString().trim(); //Lấy ra năm
        Locale vietNam = new Locale("vi", "VN");
        NumberFormat numberFormat = NumberFormat.getInstance(vietNam);
        numberFormat.setMaximumFractionDigits(0); //Format tiền vnd
        int rows = jTableCN.getRowCount();
        for (int i = 0; i < rows; i++) {
            String maCN = modelCongNhan.getValueAt(i, 0).toString();
            if (timBangLuongTheoMaCN(maCN) != null) {
                BangLuongCongNhan bangLuong = timBangLuongTheoMaCN(maCN);
                Object[] arr = {bangLuong.getMaBangLuong(),
                    bangLuong.getCongNhan().getHoTen(),
                    bangLuong.getNgayTinhLuong().format(dateTimeFormatter),
                    bangLuong.getSoNgayLam(),
                    bangLuong.getSoNgayNghi(),
                    numberFormat.format(bangLuong.getLuongSanPham()) + " ₫",
                    numberFormat.format(bangLuong.getLuongTangCa()) + " ₫",
                    numberFormat.format(bangLuong.getTienUng()) + " ₫",
                    numberFormat.format(bangLuong.getTienPhuCap()) + " ₫",
                    numberFormat.format(bangLuong.getTienChuyenCan()) + " ₫",
                    numberFormat.format(bangLuong.getBaoHiemXaHoi()) + " ₫",
                    numberFormat.format(bangLuong.getThucLanh()) + " ₫"};
                modelBangLuong.addRow(arr);
            }

        }
    }

    //Đổi string qua int
    public int stringToInt(String s) {
        int foo;
        try {
            foo = Integer.parseInt(s);
        } catch (NumberFormatException e) {
            foo = 0;
        }
        return foo;
    }

    //Hàm lấy ra chi tiết chấm công
    public ArrayList<ChiTietBangChamCong> getChiTietChamCong(ArrayList<BangChamCongCongNhan> dsBangChamCong) {
        ArrayList<ChiTietBangChamCong> dsChiTietChamCong = new ArrayList<ChiTietBangChamCong>();
        //Lấy ra danh sách các chi tiết chấm công thuộc các bảng chấm công
        for (BangChamCongCongNhan bcc : dsBangChamCong) {
            for (ChiTietBangChamCong chiTiet : dsAllCTChamCong) {
//                JOptionPane.showMessageDialog(null, chiTiet.getBangCC().getMaBangChamCong() + "\n" + bcc.getMaBangChamCong());
                if (chiTiet.getBangCC().getMaBangChamCong().equalsIgnoreCase(bcc.getMaBangChamCong())) {
                    dsChiTietChamCong.add(chiTiet);
                }
            }
        }
        return dsChiTietChamCong;
    }

    //Hàm lấy ra bảng phân công
    public ArrayList<BangPhanCong> getBangPhanCong(ArrayList<ChiTietBangChamCong> dsChiTietChamCong) {
        ArrayList<BangPhanCong> dsBangPhanCong = new ArrayList<BangPhanCong>();
        //Lấy ra các bảng phân công
        for (BangPhanCong bangPhanCong : dsAllBangPhanCong) {
            for (ChiTietBangChamCong chiTiet : dsChiTietChamCong) {
//                JOptionPane.showMessageDialog(null, chiTiet.getBangCC().getMaBangChamCong() + "\n" + bangPhanCong.getMaBangPC());
                if (chiTiet.getBangPC().getMaBangPC().equalsIgnoreCase(bangPhanCong.getMaBangPC())) {
                    if (dsBangPhanCong.indexOf(bangPhanCong) < 0) {
                        dsBangPhanCong.add(bangPhanCong);
                    }
                }
            }
        }

        return dsBangPhanCong;
    }

    //Hàm tính giờ tăng ca
    public double tinhGioTangCa(LocalTime gioVao, LocalTime gioRa) {
        Duration duration = Duration.between(gioVao, gioRa);
        long hours = duration.toHours();
        int minutes = duration.toMinutesPart();
        double totalHours = hours + minutes / 60.0;
        return totalHours;
    }

    //Tính lương cho 1 nhân viên
    public BangLuongCongNhan tinhLuong(ArrayList<BangChamCongCongNhan> dsBangChamCong, CongNhan cn) {
        BangLuongCongNhan bangLuong = null;
        int year = stringToInt(jComboBoxNam.getSelectedItem().toString().trim()); //Lấy năm từ combobox
        int month = stringToInt(jComboBoxThang.getSelectedItem().toString().trim()); //Lấy month từ combobox
        YearMonth yearMonthObject = YearMonth.of(year, month);
        int daysInMonth = yearMonthObject.lengthOfMonth();//Lấy ra số ngày của tháng đó 
        int soGioLamNgayNghi = 0; //Số giờ làm ca cn (CN)
        int soGioLamNgayLe = 0; //Số giờ làm ngày lễ (các ngày nghỉ the quy định nhà nước);
        int soNgayLam = 0, soNgayNghi = 0; //Số ngày làm và số ngày nghỉ
        double tienUng = dstienUng.get(cn.getMaCN());
        String maBangLuong = Integer.toString(year).substring(2) + (month < 10 ? "0" + Integer.toString(month) : Integer.toString(month)) + cn.getMaCN();
//        if (bangLuongCongNhan_dao.getBangLuongCongNhanTheoMa(maBangLuong) != null) {
//        } else {
        //Lấy ra bảng chấm công của nhân viên từ danh sách bảng chấm công của tất cả nhân viên
        ArrayList<BangChamCongCongNhan> dsBCCNgayThuong = new ArrayList<BangChamCongCongNhan>();
        ArrayList<BangChamCongCongNhan> dsBCCNgayNghi = new ArrayList<BangChamCongCongNhan>();
        ArrayList<BangChamCongCongNhan> dsBCCNgayLe = new ArrayList<BangChamCongCongNhan>();
        ArrayList<BangChamCongCongNhan> dsBCCTangCa = new ArrayList<BangChamCongCongNhan>();
        ArrayList<ChiTietBangChamCong> dsChiTietChamCong = new ArrayList<ChiTietBangChamCong>();
        ArrayList<BangPhanCong> dsBangPhanCong = new ArrayList<BangPhanCong>();
        Map<String, Integer> dsNgayLam = new HashMap<String, Integer>();;
        for (BangChamCongCongNhan bcc : dsBangChamCong) {
            if (bcc.getCn().getMaCN().equalsIgnoreCase(cn.getMaCN())) {
                //Lọc ra các bảng chấm công trong tháng và năm được chọn tren combobox
                if (bcc.getNgayChamCong().getMonthValue() == month && bcc.getNgayChamCong().getYear() == year) {
                    if (bcc.getCaLamViec().equalsIgnoreCase("ca chủ nhật")
                            || bcc.getCaLamViec().equalsIgnoreCase("ca CN")) {
                        dsBCCNgayNghi.add(bcc);
                        dsNgayLam.put(bcc.getNgayChamCongString(), 1);
//                            soGioLamNgayNghi++;
                    } else if (bcc.getCaLamViec().equalsIgnoreCase("ca ngày lễ")
                            || bcc.getCaLamViec().equalsIgnoreCase("ngày lễ")) {
                        dsBCCNgayLe.add(bcc);
                        dsNgayLam.put(bcc.getNgayChamCongString(), 1);
//                            soGioLamNgayLe++;
                    } else {
                        if (bcc.getCaLamViec().equalsIgnoreCase("ca 3")) {
                            dsBCCTangCa.add(bcc);
                        } else {
                            dsBCCNgayThuong.add(bcc);
                        }
                        dsNgayLam.put(bcc.getNgayChamCongString(), 1);
//                            soNgayLam++;
                    }
                }
            }
        }

        //Nếu nhân viên đó không có thông tin chấm công trong tháng đó
        if (dsBCCNgayThuong.size() == 0 && dsBCCNgayLe.size() == 0 && dsBCCNgayNghi.size() == 0 && dsBCCTangCa.size() == 0) {
//                JOptionPane.showMessageDialog(null, "Nhân viên này ko có thông tin chấm công");
            return null;
        }

        bangLuong = new BangLuongCongNhan(maBangLuong, LocalDateTime.now(), dsNgayLam.size(), daysInMonth - dsNgayLam.size(), tienUng, cn);
//            //Tính lương ngày thường
        dsChiTietChamCong = getChiTietChamCong(dsBCCNgayThuong);
        dsBangPhanCong = getBangPhanCong(dsChiTietChamCong);
        bangLuong.setLuongSanPham(dsBangPhanCong, dsChiTietChamCong);
        //Tính lương tăng ca ngày thường
        dsChiTietChamCong = getChiTietChamCong(dsBCCTangCa);
        dsBangPhanCong = getBangPhanCong(dsChiTietChamCong);
        bangLuong.setLuongTangCa(dsBangPhanCong, dsChiTietChamCong, 1.5);
        //Tính lương ngày nghỉ 
        dsChiTietChamCong = getChiTietChamCong(dsBCCNgayNghi);
        dsBangPhanCong = getBangPhanCong(dsChiTietChamCong);
        bangLuong.setLuongTangCa(dsBangPhanCong, dsChiTietChamCong, 2);
        //Tính lương ngày lễ
        dsChiTietChamCong = getChiTietChamCong(dsBCCNgayLe);
        dsBangPhanCong = getBangPhanCong(dsChiTietChamCong);
        bangLuong.setLuongTangCa(dsBangPhanCong, dsChiTietChamCong, 3);
        return bangLuong;
    }

    //Tìm bảng lương theo mã của nhân viên 
    public BangLuongCongNhan timBangLuongTheoMaCN(String maCN) {
        BangLuongCongNhan bangLuong = null;
        String nam = jComboBoxNam.getSelectedItem().toString().substring(2);
        for (BangLuongCongNhan bl : dsAllBangLuong) {
            if (bl.getCongNhan().getMaCN().equalsIgnoreCase(maCN)
                    && bl.getMaBangLuong().substring(0, 2).equalsIgnoreCase(nam)
                    && bl.getMaBangLuong().substring(2, 4).equalsIgnoreCase(String.format("%02d", stringToInt(jComboBoxThang.getSelectedItem().toString())))) {
                bangLuong = bl;
                break;
            }
        }
        return bangLuong;
    }

    //Tìm bảng lương theo mã của nhân viên 
    public BangLuongCongNhan timBangLuongTheoMaCNThangNam(int m, int n, String maCN) {
        if (m == 1 && n == 23) {
            return null;
        }
        for (BangLuongCongNhan bl : dsAllBangLuong) {
            if (bl.getCongNhan().getMaCN().equalsIgnoreCase(maCN)
                    && bl.getMaBangLuong().substring(0, 2).equalsIgnoreCase(n + "")
                    && bl.getMaBangLuong().substring(2, 4).equalsIgnoreCase(String.format("%02d", m))) {
                return bl;
            }
        }
        if (m > 1) {
            return timBangLuongTheoMaCNThangNam(m - 1, n, maCN);
        } else {
            return timBangLuongTheoMaCNThangNam(m, n - 1, maCN);
        }
    }

    //Reset lại các textfield khi nhấn vào một nhân viên
    public void resetTextField() {
        int row = jTableBangLuong.getSelectedRow();
        if (row != -1) {
            jTextFieldTenCN.setText(modelBangLuong.getValueAt(row, 1).toString());
            jTextFieldNgayTinhLuong.setText(modelBangLuong.getValueAt(row, 2).toString());
            jTextFieldSoNgayLam.setText(modelBangLuong.getValueAt(row, 3).toString());
            jTextFieldSoNgayNghi.setText(modelBangLuong.getValueAt(row, 4).toString());
            jTextFieldBHXH.setText(modelBangLuong.getValueAt(row, 10).toString());
            jTextFieldChuyenCan.setText(modelBangLuong.getValueAt(row, 9).toString());
            jTextFieldLuongSP.setText(modelBangLuong.getValueAt(row, 5).toString());
            jTextFieldPhuCap.setText(modelBangLuong.getValueAt(row, 8).toString());
            jTextFieldTangCa.setText(modelBangLuong.getValueAt(row, 6).toString());
            jTextFieldTienUng.setText(modelBangLuong.getValueAt(row, 7).toString());
            jTextFieldThucLanh.setText(modelBangLuong.getValueAt(row, 11).toString());
        }

    }

    public void clearText() {
        int row = jTableCN.getSelectedRow();
        String tienUng = "0.0";
        if (row != -1) {
            tienUng = dstienUng.get(modelCongNhan.getValueAt(row, 0).toString()).toString();
        }
        jTextFieldTenCN.setText("");
        jTextFieldBHXH.setText("");
        jTextFieldChuyenCan.setText("");
        jTextFieldLuongSP.setText("");
        jTextFieldPhuCap.setText("");
        jTextFieldNgayTinhLuong.setText("");
        jTextFieldSoNgayLam.setText("");
        jTextFieldSoNgayNghi.setText("");
        jTextFieldTangCa.setText("");
        jTextFieldTienUng.setText(tienUng);
        jTextFieldThucLanh.setText("");
    }

    void createPDF(String fileName, Object[] bangLuong, String tenCN) {
        Document doc = new Document();
        try {
            File fontFile = new File("libs/vuArial.ttf");
            PdfWriter.getInstance(doc, new FileOutputStream("D:\\" + fileName + ".pdf"));
            doc.open();
//            Font font = FontFactory.getFont(fontFile.getAbsolutePath(), BaseFont.IDENTITY_H, BaseFont.EMBEDDED, 12);
            BaseFont bf = BaseFont.createFont(fontFile.getAbsolutePath(), BaseFont.IDENTITY_H, BaseFont.EMBEDDED);
            Font font = new Font(bf, 11);

            // Tạo một bảng với hai cột
            PdfPTable table = new PdfPTable(2);

            // Tạo đoạn văn cho thông tin công ty
            Paragraph companyInfo = new Paragraph("Công ty TNHH may mặc Thịnh Vượng\nĐịa chỉ: 164/21A, quận 12, tp HCM\nMã số thuế: XXXXXXX", font);
            companyInfo.setLeading(26);
            PdfPCell companyCell = new PdfPCell(companyInfo);
            companyCell.setBorder(Rectangle.NO_BORDER);
            companyCell.setHorizontalAlignment(1);
            table.addCell(companyCell);

            // Tạo đoạn văn cho "Cộng hòa xã hội chủ nghĩa Việt Nam"
            Paragraph country = new Paragraph("Cộng hòa xã hội chủ nghĩa Việt Nam\n-Độc lập-Tự do-Hạnh phúc-", font);
            country.setLeading(26);
            PdfPCell countryCell = new PdfPCell(country);
            countryCell.setHorizontalAlignment(1);
            countryCell.setBorder(Rectangle.NO_BORDER);
            table.addCell(countryCell);
            table.setWidthPercentage(100);
            doc.add(table);

            // Get the current date
            LocalDate today = LocalDate.now();

            // Format the date
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
            String formattedDate = today.format(formatter);
            // Tạo một đoạn văn với nội dung là ngày hiện tại
            font = new Font(bf, 13, Font.ITALIC);
            Paragraph dateParagraph = new Paragraph("Ngày: " + formattedDate);
            dateParagraph.setAlignment(2);

            // Thêm đoạn văn vào tài liệu
            doc.add(dateParagraph);
            font = new Font(bf, 20, Font.BOLD);
            Paragraph header = new Paragraph("Bảng lương tháng " + bangLuong[0].toString().substring(2, 4), font);
            header.setAlignment(1);
            header.setSpacingAfter(25);
            doc.add(header);

            font = new Font(bf, 13);
            Paragraph employeeName = new Paragraph("Tên công nhân: " + tenCN, font);
            employeeName.setLeading(20);
            doc.add(employeeName);
            Paragraph tieuDeBangLuong = new Paragraph("Thông tin bảng lương", font);
            tieuDeBangLuong.setSpacingAfter(22);
            doc.add(tieuDeBangLuong);
            font = new Font(bf, 13);
            PdfPTable pTable = new PdfPTable(2);
            pTable.setWidthPercentage(80);
            Object[] colums = {"Mã bảng lương", "Ngày tính lương", "Số ngày làm", "Số ngày nghỉ", "Lương sản phẩm", "Lương tăng ca", "Tiền ứng", "Tiền phụ cấp",
                "Tiền chuyên cần", "Bảo hiểm xã hội", "Thực lãnh"};
            for (int i = 0; i < bangLuong.length; i++) {
                PdfPCell cell = new PdfPCell(new Phrase(colums[i].toString(), font));
                cell.setPadding(10);
                pTable.addCell(cell);
                cell = new PdfPCell(new Phrase(bangLuong[i].toString(), font));
                cell.setHorizontalAlignment(2);
                cell.setVerticalAlignment(1);
                pTable.addCell(cell);
            }
            doc.add(pTable);
            doc.close();
        } catch (Exception e) {
        }
    }

    public void resetHashMapAndPhongBan() {
        //Khởi tạo ds tiền ứng cho các nv là 0
        for (CongNhan cn : dsCongNhan) {
            dstienUng.put(cn.getMaCN(), 0.0);
        }

    }

    public boolean checkBCCNV(String maCN) {
        int year = stringToInt(jComboBoxNam.getSelectedItem().toString().trim()); //Lấy năm từ combobox
        int month = stringToInt(jComboBoxThang.getSelectedItem().toString().trim()); //Lấy month từ combobox
        for (BangChamCongCongNhan bcc : dsBangChamCong) {
            if (bcc.getCn().getMaCN().equalsIgnoreCase(maCN)) {
                //Lọc ra các bảng chấm công trong tháng và năm được chọn tren combobox
                if (bcc.getNgayChamCong().getMonthValue() == month
                        && bcc.getNgayChamCong().getYear() == year) {
                    return true;
                }
            }
        }

        return false;
    }

    public CongNhan timCNTheoMaCN(String maCN) {
        CongNhan res = null;
        for (CongNhan cn : dsCongNhan) {
            if (cn.getMaCN().equalsIgnoreCase(maCN)) {
                res = cn;
                break;
            }
        }
        return res;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonLamMoi;
    private javax.swing.JButton jButtonPDF;
    private javax.swing.JButton jButtonTimKiem;
    private javax.swing.JButton jButtonTinhLuong;
    private javax.swing.JComboBox<String> jComboBoxNam;
    private javax.swing.JComboBox<String> jComboBoxThang;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabelBHXH;
    private javax.swing.JLabel jLabelChuyenCan;
    private javax.swing.JLabel jLabelLuongSP;
    private javax.swing.JLabel jLabelNam;
    private javax.swing.JLabel jLabelNgayTinhLuong;
    private javax.swing.JLabel jLabelPhuCap;
    private javax.swing.JLabel jLabelSoNgayLam;
    private javax.swing.JLabel jLabelSoNgayNghi;
    private javax.swing.JLabel jLabelTangCa;
    private javax.swing.JLabel jLabelTenCN;
    private javax.swing.JLabel jLabelThang;
    private javax.swing.JLabel jLabelThucLanh;
    private javax.swing.JLabel jLabelTienUng;
    private javax.swing.JLabel jLabelTimKiem;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelDSCN;
    private javax.swing.JPanel jPanelLuong;
    private javax.swing.JPanel jPanelThongTinLuong;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTableBangChamCong;
    private javax.swing.JTable jTableBangLuong;
    private javax.swing.JTable jTableCN;
    private javax.swing.JTextField jTextFieldBHXH;
    private javax.swing.JTextField jTextFieldChuyenCan;
    private javax.swing.JTextField jTextFieldLuongSP;
    private javax.swing.JTextField jTextFieldNgayTinhLuong;
    private javax.swing.JTextField jTextFieldPhuCap;
    private javax.swing.JTextField jTextFieldSoNgayLam;
    private javax.swing.JTextField jTextFieldSoNgayNghi;
    private javax.swing.JTextField jTextFieldTangCa;
    private javax.swing.JTextField jTextFieldTenCN;
    private javax.swing.JTextField jTextFieldThucLanh;
    private javax.swing.JTextField jTextFieldTienUng;
    private javax.swing.JTextField jTextFieldTimKiem;
    private javax.swing.JPanel pTinhLuongNV;
    private javax.swing.JPanel pTittle;
    private javax.swing.JPanel pTongQuan;
    // End of variables declaration//GEN-END:variables
    private CongNhan_DAO congNhan_dao;
    private BangChamCongCongNhan_DAO bangChamCong_dao;
    private BangLuongCongNhan_DAO bangLuongCongNhan_dao;
    private DefaultTableModel modelCongNhan;
    private DefaultTableModel modelBangChamCong;
    private DefaultTableModel modelBangLuong;
    private ArrayList<BangChamCongCongNhan> dsBangChamCong;
    private ArrayList<BangLuongCongNhan> dsAllBangLuong;
    private ArrayList<CongNhan> dsCongNhan;
    private ArrayList<CongNhan> dsCongNhanTmp;
    private Boolean isAllChoosen = false;
    private Map<String, Double> dstienUng;
    private DateTimeFormatter dateTimeFormatter;
    private ChiTietBangChamCong_DAO chiTietBangChamCong_DAO;
    private BangPhanCong_DAO bangPhanCong_DAO;
    private CongDoan_DAO congDoan_DAO;
    private ArrayList<BangPhanCong> dsAllBangPhanCong;
    private ArrayList<CongDoan> dsCongDoan;
    private ArrayList<SanPham> dsSanPham;
    private ArrayList<ChiTietBangChamCong> dsAllCTChamCong;
}
