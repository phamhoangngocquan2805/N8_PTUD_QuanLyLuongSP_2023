/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package gui;

import dao.BangChamCongNhanVien_DAO;
import dao.BangLuongNhanVien_DAO;
import dao.NhanVienHanhChinh_DAO;
import entity.BangChamCongNhanVien;
import entity.BangLuongNhanVien;
import entity.NhanVienHanhChinh;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.FileOutputStream;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.Month;
import java.time.YearMonth;
import java.util.ArrayList;
import java.util.Calendar;
import javax.swing.*;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.DocumentListener;
import javax.swing.event.UndoableEditListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.Element;
import javax.swing.text.Position;
import javax.swing.text.Segment;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.awt.print.Book;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
//import com.itextpdf.text.Document;
//import com.itextpdf.text.DocumentException;
//import com.itextpdf.text.Paragraph;
//import com.itextpdf.text.pdf.BaseFont;
//import com.itextpdf.text.pdf.PdfWriter;
import java.math.RoundingMode;
import java.text.DateFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import javax.swing.JDialog;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import xuli.DanhMucBean;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author acer
 */
public class GDTinhLuongNV extends javax.swing.JPanel {

    /**
     * Creates new form GDTinhLuongNV
     */
    public GDTinhLuongNV() {
        initComponents();
        bangChamCong_dao = new BangChamCongNhanVien_DAO(); //Lấy ds bcc
        bangLuongNhanVien_dao = new BangLuongNhanVien_DAO();
        nhanVien_dao = new NhanVienHanhChinh_DAO();
        dsAllBangLuong = bangLuongNhanVien_dao.getAllBangLuongNhanVien(); //Lấy ds bảng lương
        dsNhanVien = nhanVien_dao.getAllNhanVien(); //Lấy ds nhân viên
        dsNhanVienTmp = new ArrayList<NhanVienHanhChinh>(); //Ds nhân viên tạm
        dsBangChamCong = bangChamCong_dao.getAllBangChamCongNhanVien();
        dateTimeFormatter = DateTimeFormatter.ofPattern("dd-MM-yyyy"); //format ngày
        dstienUng = new HashMap<String, Double>(); //Lưu ds tiền ứng

        loadComponentsTableNV();// load model table nhân viên
        loadComponentsTableBangChamCong(); //load model table chấm công
        loadComponentsTableBangLuong(); //load model table bảng lương
        resetHashMapAndPhongBan(); // khởi tạo 
        resetTableNV(dsNhanVien);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextFieldLuongChinh2 = new javax.swing.JTextField();
        jLabelLuongChinh2 = new javax.swing.JLabel();
        pTinhLuongNV = new javax.swing.JPanel();
        pTittle = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        pTongQuan = new javax.swing.JPanel();
        jPanelThongTinLuong = new javax.swing.JPanel();
        jLabelTenNV = new javax.swing.JLabel();
        jTextFieldTenNV = new javax.swing.JTextField();
        jLabelNgayTinhLuong = new javax.swing.JLabel();
        jTextFieldNgayTinhLuong = new javax.swing.JTextField();
        jLabelSoNgayLam = new javax.swing.JLabel();
        jTextFieldSoNgayLam = new javax.swing.JTextField();
        jLabelSoNgayNghi = new javax.swing.JLabel();
        jTextFieldSoNgayNghi = new javax.swing.JTextField();
        jLabelLuongChinh = new javax.swing.JLabel();
        jTextFieldLuongChinh = new javax.swing.JTextField();
        jTextFieldTangCa = new javax.swing.JTextField();
        jLabelTangCa = new javax.swing.JLabel();
        jLabelTienUng = new javax.swing.JLabel();
        jTextFieldTienUng = new javax.swing.JTextField();
        jLabelPhuCap = new javax.swing.JLabel();
        jTextFieldPhuCap = new javax.swing.JTextField();
        jLabelChuyenCan = new javax.swing.JLabel();
        jTextFieldChuyenCan = new javax.swing.JTextField();
        jLabelBHXH = new javax.swing.JLabel();
        jTextFieldBHXH = new javax.swing.JTextField();
        jTextFieldThucLanh = new javax.swing.JTextField();
        jLabelThucLanh = new javax.swing.JLabel();
        jPanelDSNV = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableNV = new javax.swing.JTable();
        jPanelLuong = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableBangLuong = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableBangChamCong = new javax.swing.JTable();
        jButtonTinhLuong = new javax.swing.JButton();
        jButtonPDF = new javax.swing.JButton();
        jComboBoxThang = new javax.swing.JComboBox<>();
        jLabelThang = new javax.swing.JLabel();
        jLabelNam = new javax.swing.JLabel();
        jComboBoxNam = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        jComboBoxPhongBan = new javax.swing.JComboBox<>();
        jTextFieldTimKiem = new javax.swing.JTextField();
        jLabelPhongBan = new javax.swing.JLabel();
        jLabelTimKiem = new javax.swing.JLabel();
        jButtonTimKiem = new javax.swing.JButton();
        jButtonLamMoi = new javax.swing.JButton();

        jTextFieldLuongChinh2.setEnabled(false);

        jLabelLuongChinh2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelLuongChinh2.setForeground(new java.awt.Color(255, 255, 255));
        jLabelLuongChinh2.setText("Lương chính:");

        pTinhLuongNV.setBackground(new java.awt.Color(255, 255, 255));
        pTinhLuongNV.setPreferredSize(new java.awt.Dimension(958, 735));

        pTittle.setBackground(new java.awt.Color(85, 167, 222));
        pTittle.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 5, 0, 0, new java.awt.Color(233, 231, 231)));

        jLabel15.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(234, 233, 233));
        jLabel15.setText("TÍNH LƯƠNG NHÂN VIÊN HÀNH CHÍNH");

        javax.swing.GroupLayout pTittleLayout = new javax.swing.GroupLayout(pTittle);
        pTittle.setLayout(pTittleLayout);
        pTittleLayout.setHorizontalGroup(
            pTittleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pTittleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pTittleLayout.setVerticalGroup(
            pTittleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
        );

        pTongQuan.setBackground(new java.awt.Color(255, 255, 255));
        pTongQuan.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 5, 0, 0, new java.awt.Color(233, 231, 231)));
        pTongQuan.setRequestFocusEnabled(false);

        jPanelThongTinLuong.setBackground(new java.awt.Color(204, 204, 204));
        jPanelThongTinLuong.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thông tin lương nhân viên", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14))); // NOI18N

        jLabelTenNV.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelTenNV.setText("Tên nhân viên:");

        jTextFieldTenNV.setEditable(false);
        jTextFieldTenNV.setBackground(new java.awt.Color(255, 255, 255));
        jTextFieldTenNV.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jLabelNgayTinhLuong.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNgayTinhLuong.setText("Ngày tính lương:");

        jTextFieldNgayTinhLuong.setEditable(false);
        jTextFieldNgayTinhLuong.setBackground(new java.awt.Color(255, 255, 255));
        jTextFieldNgayTinhLuong.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jLabelSoNgayLam.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSoNgayLam.setText("Số ngày làm:");

        jTextFieldSoNgayLam.setEditable(false);
        jTextFieldSoNgayLam.setBackground(new java.awt.Color(255, 255, 255));
        jTextFieldSoNgayLam.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jLabelSoNgayNghi.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSoNgayNghi.setText("Số ngày nghỉ:");

        jTextFieldSoNgayNghi.setEditable(false);
        jTextFieldSoNgayNghi.setBackground(new java.awt.Color(255, 255, 255));
        jTextFieldSoNgayNghi.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jLabelLuongChinh.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelLuongChinh.setText("Lương chính:");

        jTextFieldLuongChinh.setEditable(false);
        jTextFieldLuongChinh.setBackground(new java.awt.Color(255, 255, 255));
        jTextFieldLuongChinh.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jTextFieldTangCa.setEditable(false);
        jTextFieldTangCa.setBackground(new java.awt.Color(255, 255, 255));
        jTextFieldTangCa.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jLabelTangCa.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelTangCa.setText("Lương tăng ca:");

        jLabelTienUng.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelTienUng.setText("Tiền ứng:");

        jTextFieldTienUng.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTextFieldTienUng.setText("0");
        jTextFieldTienUng.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldTienUngFocusLost(evt);
            }
        });
        jTextFieldTienUng.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldTienUngActionPerformed(evt);
            }
        });
        jTextFieldTienUng.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldTienUngKeyPressed(evt);
            }
        });

        jLabelPhuCap.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelPhuCap.setText("Phụ cấp:");

        jTextFieldPhuCap.setEditable(false);
        jTextFieldPhuCap.setBackground(new java.awt.Color(255, 255, 255));
        jTextFieldPhuCap.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jLabelChuyenCan.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelChuyenCan.setText("Chuyên cần:");

        jTextFieldChuyenCan.setEditable(false);
        jTextFieldChuyenCan.setBackground(new java.awt.Color(255, 255, 255));
        jTextFieldChuyenCan.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jLabelBHXH.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelBHXH.setText("BHXH:");

        jTextFieldBHXH.setEditable(false);
        jTextFieldBHXH.setBackground(new java.awt.Color(255, 255, 255));
        jTextFieldBHXH.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jTextFieldThucLanh.setEditable(false);
        jTextFieldThucLanh.setBackground(new java.awt.Color(255, 255, 255));
        jTextFieldThucLanh.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jLabelThucLanh.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelThucLanh.setText("Thực lãnh:");

        javax.swing.GroupLayout jPanelThongTinLuongLayout = new javax.swing.GroupLayout(jPanelThongTinLuong);
        jPanelThongTinLuong.setLayout(jPanelThongTinLuongLayout);
        jPanelThongTinLuongLayout.setHorizontalGroup(
            jPanelThongTinLuongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelThongTinLuongLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelThongTinLuongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanelThongTinLuongLayout.createSequentialGroup()
                        .addComponent(jLabelThucLanh)
                        .addGap(71, 71, 71)
                        .addComponent(jTextFieldThucLanh, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelThongTinLuongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanelThongTinLuongLayout.createSequentialGroup()
                            .addComponent(jLabelTenNV)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextFieldTenNV, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanelThongTinLuongLayout.createSequentialGroup()
                            .addComponent(jLabelNgayTinhLuong)
                            .addGap(29, 29, 29)
                            .addComponent(jTextFieldNgayTinhLuong, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanelThongTinLuongLayout.createSequentialGroup()
                            .addComponent(jLabelSoNgayLam)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextFieldSoNgayLam, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanelThongTinLuongLayout.createSequentialGroup()
                            .addComponent(jLabelSoNgayNghi)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextFieldSoNgayNghi, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanelThongTinLuongLayout.createSequentialGroup()
                            .addComponent(jLabelLuongChinh)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextFieldLuongChinh, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 83, Short.MAX_VALUE)
                .addGroup(jPanelThongTinLuongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelThongTinLuongLayout.createSequentialGroup()
                        .addComponent(jLabelTangCa)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextFieldTangCa, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelThongTinLuongLayout.createSequentialGroup()
                        .addComponent(jLabelTienUng)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextFieldTienUng, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelThongTinLuongLayout.createSequentialGroup()
                        .addComponent(jLabelPhuCap)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextFieldPhuCap, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelThongTinLuongLayout.createSequentialGroup()
                        .addComponent(jLabelChuyenCan)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextFieldChuyenCan, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelThongTinLuongLayout.createSequentialGroup()
                        .addComponent(jLabelBHXH)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextFieldBHXH, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(14, 14, 14))
        );
        jPanelThongTinLuongLayout.setVerticalGroup(
            jPanelThongTinLuongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelThongTinLuongLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelThongTinLuongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelThongTinLuongLayout.createSequentialGroup()
                        .addGroup(jPanelThongTinLuongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldTangCa, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelTangCa))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelThongTinLuongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldTienUng, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelTienUng))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelThongTinLuongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldPhuCap, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelPhuCap))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelThongTinLuongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldChuyenCan, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelChuyenCan))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelThongTinLuongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldBHXH, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelBHXH)))
                    .addGroup(jPanelThongTinLuongLayout.createSequentialGroup()
                        .addGroup(jPanelThongTinLuongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldTenNV, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelTenNV))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelThongTinLuongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldNgayTinhLuong, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelNgayTinhLuong))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelThongTinLuongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldSoNgayLam, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelSoNgayLam))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelThongTinLuongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldSoNgayNghi, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelSoNgayNghi))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelThongTinLuongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldLuongChinh, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelLuongChinh))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelThongTinLuongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelThucLanh)
                    .addComponent(jTextFieldThucLanh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelDSNV.setBackground(new java.awt.Color(255, 255, 255));
        jPanelDSNV.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Danh sách nhân viên", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14))); // NOI18N

        jTableNV.setBackground(new java.awt.Color(204, 204, 204));
        jTableNV.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTableNV.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTableNV.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Mã nhân viên", "Tên nhân viên"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableNV.setRowHeight(24);
        jTableNV.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jTableNV.setShowHorizontalLines(true);
        jTableNV.setShowVerticalLines(true);
        jTableNV.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableNVMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTableNV);

        javax.swing.GroupLayout jPanelDSNVLayout = new javax.swing.GroupLayout(jPanelDSNV);
        jPanelDSNV.setLayout(jPanelDSNVLayout);
        jPanelDSNVLayout.setHorizontalGroup(
            jPanelDSNVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
        );
        jPanelDSNVLayout.setVerticalGroup(
            jPanelDSNVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );

        jPanelLuong.setBackground(new java.awt.Color(204, 204, 204));

        jTableBangLuong.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jTableBangLuong.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Mã bảng lương", "Tên nhân viên", "Ngày tính lương", "Số ngày làm", "Số ngày nghỉ", "Lương chính", "Lương tăng ca", "Tiền ứng", "Tiền phụ cấp", "Tiền chuyên cần", "Bảo hiểm xã hội", "Thực lãnh"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableBangLuong.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTableBangLuong.setRowHeight(24);
        jTableBangLuong.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableBangLuongMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTableBangLuong);

        jTabbedPane1.addTab("Lương", jScrollPane3);

        jTableBangChamCong.setBackground(new java.awt.Color(204, 204, 204));
        jTableBangChamCong.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTableBangChamCong.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Mã bảng chấm công", "Tên NV", "Giờ vào", "Giờ ra", "Ca làm việc"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableBangChamCong.setRowHeight(22);
        jTableBangChamCong.setShowHorizontalLines(true);
        jTableBangChamCong.setShowVerticalLines(true);
        jScrollPane1.setViewportView(jTableBangChamCong);

        jTabbedPane1.addTab("Chi tiết chấm công", jScrollPane1);

        javax.swing.GroupLayout jPanelLuongLayout = new javax.swing.GroupLayout(jPanelLuong);
        jPanelLuong.setLayout(jPanelLuongLayout);
        jPanelLuongLayout.setHorizontalGroup(
            jPanelLuongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        jPanelLuongLayout.setVerticalGroup(
            jPanelLuongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelLuongLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jButtonTinhLuong.setBackground(new java.awt.Color(85, 167, 222));
        jButtonTinhLuong.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jButtonTinhLuong.setForeground(new java.awt.Color(255, 255, 255));
        jButtonTinhLuong.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/calculator-solid.png"))); // NOI18N
        jButtonTinhLuong.setMnemonic('T');
        jButtonTinhLuong.setText("Tính lương");
        jButtonTinhLuong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTinhLuongActionPerformed(evt);
            }
        });

        jButtonPDF.setBackground(new java.awt.Color(85, 167, 222));
        jButtonPDF.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jButtonPDF.setForeground(new java.awt.Color(255, 255, 255));
        jButtonPDF.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/file-regular.png"))); // NOI18N
        jButtonPDF.setMnemonic('E');
        jButtonPDF.setText("Xuất Excel");
        jButtonPDF.setToolTipText("");
        jButtonPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPDFActionPerformed(evt);
            }
        });

        jComboBoxThang.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jComboBoxThang.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
        jComboBoxThang.setMaximumSize(new java.awt.Dimension(66, 29));
        jComboBoxThang.setMinimumSize(new java.awt.Dimension(66, 29));
        jComboBoxThang.setPreferredSize(new java.awt.Dimension(66, 29));
        Calendar cal = Calendar.getInstance();
        int currentMonth = cal.get(Calendar.MONTH) + 1;
        jComboBoxThang.setSelectedItem(String.valueOf(currentMonth));
        jComboBoxThang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxThangActionPerformed(evt);
            }
        });

        jLabelThang.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabelThang.setText("Tháng:");

        jLabelNam.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabelNam.setText("Năm:");

        jComboBoxNam.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jComboBoxNam.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2023" }));
        jComboBoxNam.setMaximumSize(new java.awt.Dimension(66, 29));
        //Calendar cal = Calendar.getInstance();
        int currentYear = cal.get(Calendar.YEAR);
        jComboBoxNam.setSelectedItem(String.valueOf(currentYear));
        jComboBoxNam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxNamActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Tìm kiếm nhân viên"));

        jComboBoxPhongBan.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxPhongBanItemStateChanged(evt);
            }
        });
        jComboBoxPhongBan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxPhongBanActionPerformed(evt);
            }
        });

        jTextFieldTimKiem.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTextFieldTimKiem.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldTimKiemFocusLost(evt);
            }
        });
        jTextFieldTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldTimKiemActionPerformed(evt);
            }
        });
        jTextFieldTimKiem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldTimKiemKeyPressed(evt);
            }
        });

        jLabelPhongBan.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelPhongBan.setText("Phòng ban:");

        jLabelTimKiem.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelTimKiem.setText("Tìm kiếm:");

        jButtonTimKiem.setBackground(new java.awt.Color(85, 167, 222));
        jButtonTimKiem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/magnifying-glass-solid.png"))); // NOI18N
        jButtonTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTimKiemActionPerformed(evt);
            }
        });

        jButtonLamMoi.setBackground(new java.awt.Color(85, 167, 222));
        jButtonLamMoi.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jButtonLamMoi.setForeground(new java.awt.Color(255, 255, 255));
        jButtonLamMoi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/arrows-rotate-solid.png"))); // NOI18N
        jButtonLamMoi.setMnemonic('F');
        jButtonLamMoi.setText("Làm mới");
        jButtonLamMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLamMoiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabelPhongBan)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jComboBoxPhongBan, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabelTimKiem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButtonLamMoi)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jTextFieldTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))))
                .addGap(20, 20, 20))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxPhongBan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelPhongBan))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextFieldTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelTimKiem))
                    .addComponent(jButtonTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonLamMoi)
                .addContainerGap())
        );

        javax.swing.GroupLayout pTongQuanLayout = new javax.swing.GroupLayout(pTongQuan);
        pTongQuan.setLayout(pTongQuanLayout);
        pTongQuanLayout.setHorizontalGroup(
            pTongQuanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pTongQuanLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pTongQuanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelLuong, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pTongQuanLayout.createSequentialGroup()
                        .addGroup(pTongQuanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanelThongTinLuong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pTongQuanLayout.createSequentialGroup()
                                .addComponent(jLabelThang)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxThang, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(38, 38, 38)
                                .addComponent(jLabelNam)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxNam, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonTinhLuong)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonPDF)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGroup(pTongQuanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pTongQuanLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jPanelDSNV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pTongQuanLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pTongQuanLayout.setVerticalGroup(
            pTongQuanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pTongQuanLayout.createSequentialGroup()
                .addGroup(pTongQuanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pTongQuanLayout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanelDSNV, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pTongQuanLayout.createSequentialGroup()
                        .addComponent(jPanelThongTinLuong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addGroup(pTongQuanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonTinhLuong)
                            .addComponent(jLabelThang)
                            .addComponent(jComboBoxNam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelNam)
                            .addComponent(jComboBoxThang, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonPDF))
                        .addGap(7, 7, 7)
                        .addComponent(jPanelLuong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout pTinhLuongNVLayout = new javax.swing.GroupLayout(pTinhLuongNV);
        pTinhLuongNV.setLayout(pTinhLuongNVLayout);
        pTinhLuongNVLayout.setHorizontalGroup(
            pTinhLuongNVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pTittle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pTongQuan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pTinhLuongNVLayout.setVerticalGroup(
            pTinhLuongNVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pTinhLuongNVLayout.createSequentialGroup()
                .addComponent(pTittle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(pTongQuan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 972, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(pTinhLuongNV, javax.swing.GroupLayout.DEFAULT_SIZE, 972, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 773, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(pTinhLuongNV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 38, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonTinhLuongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTinhLuongActionPerformed
        // Sự kiện btn tính lương
        int rows = modelNVHC.getRowCount();
        for (int i = 0; i < rows; i++) {
            //Lấy ra nhân viên hành chính
            NhanVienHanhChinh nv = nhanVien_dao.getNhanVienTheoMa(modelNVHC.getValueAt(i, 0).toString());
            //Thực hiện tính lương
            BangLuongNhanVien bangLuong = tinhLuong(dsBangChamCong, nv);
            //Nếu nv đó có bảng lương trong tháng và năm được chọn thì thêm mới bảng lương
            if (bangLuong != null && timBangLuongTheoMaNV(nv.getMaNV()) == null) {
                dsAllBangLuong.add(bangLuong); //Thêm bảng lương vào ds 
                bangLuongNhanVien_dao.createBangLuongNhanVien(bangLuong); //Thêm vào csdl
            } else if (bangLuong != null && timBangLuongTheoMaNV(nv.getMaNV()) != null) {
//                dsAllBangLuong.remove(timBangLuongTheoMaNV(nv.getMaNV()));
//                dsAllBangLuong.add(bangLuong);
                bangLuongNhanVien_dao.updateBangLuong(bangLuong);
                dsAllBangLuong = bangLuongNhanVien_dao.getAllBangLuongNhanVien();
            }
        }
        //Reset lại table bảng lương
        resetTableBangLuong();
    }//GEN-LAST:event_jButtonTinhLuongActionPerformed

    private void jButtonPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPDFActionPerformed
        // Sự kiện btn in pdf
        try {
            String fileName = "Bảng lương tháng " + jComboBoxThang.getSelectedItem();
            XSSFWorkbook wordkbook = new XSSFWorkbook();
            XSSFSheet sheet = wordkbook.createSheet("Bảng lương");
            XSSFSheet sheet1 = wordkbook.createSheet("Phiếu lương");
            XSSFRow row = null;

            Cell cell = null;
            // Create a font with a bigger size
            XSSFFont font = wordkbook.createFont();
            font.setFontHeightInPoints((short) 14); // Set the font size

            // Create a cell style with center alignment and the bigger font
            XSSFCellStyle style = wordkbook.createCellStyle();
            style.setAlignment(HorizontalAlignment.CENTER);
            style.setFont(font); // Apply the font to the style

            // Create the company name row and merge cells
            row = sheet.createRow(0);
            cell = row.createCell(0, CellType.STRING);
            cell.setCellValue("Công ty TNHH may mặc Thịnh Vượng");
            cell.setCellStyle(style); // Apply the style to the cell
            sheet.addMergedRegion(new CellRangeAddress(0, 0, 0, 12)); // Merge cells from column 0 to 12

            // Create the title row and merge cells
            row = sheet.createRow(1);
            cell = row.createCell(0, CellType.STRING);
            cell.setCellValue(fileName);
            cell.setCellStyle(style); // Apply the style to the cell
            sheet.addMergedRegion(new CellRangeAddress(1, 1, 0, 12)); // Merge cells from column 0 to 12
//            row = sheet.createRow(1);
            row = sheet.createRow(3);
            sheet.setColumnWidth(0, 3 * 256);
            cell = row.createCell(0, CellType.STRING);
            cell.setCellValue("STT");

            sheet.setColumnWidth(1, 20 * 256);
            cell = row.createCell(1, CellType.STRING);
            cell.setCellValue("Tên nhân viên");

            sheet.setColumnWidth(2, 15 * 256);
            cell = row.createCell(2, CellType.STRING);
            cell.setCellValue("Ngày tính lương");

            sheet.setColumnWidth(3, 15 * 256);
            cell = row.createCell(3, CellType.STRING);
            cell.setCellValue("Số ngày làm");

            sheet.setColumnWidth(4, 15 * 256);
            cell = row.createCell(4, CellType.STRING);
            cell.setCellValue("Số ngày nghỉ");

            sheet.setColumnWidth(5, 12 * 256);
            cell = row.createCell(5, CellType.STRING);
            cell.setCellValue("Lương chính");

            sheet.setColumnWidth(6, 13 * 256);
            cell = row.createCell(6, CellType.STRING);
            cell.setCellValue("Lương tăng ca");

            sheet.setColumnWidth(7, 12 * 256);
            cell = row.createCell(7, CellType.STRING);
            cell.setCellValue("Tiền ứng");

            sheet.setColumnWidth(8, 12 * 256);
            cell = row.createCell(8, CellType.STRING);
            cell.setCellValue("Tiền phụ cấp");

            sheet.setColumnWidth(9, 15 * 256);
            cell = row.createCell(9, CellType.STRING);
            cell.setCellValue("Tiền chuyên cần");

            sheet.setColumnWidth(10, 15 * 256);
            cell = row.createCell(10, CellType.STRING);
            cell.setCellValue("Bảo hiểm xã hội");

            sheet.setColumnWidth(11, 12 * 256);
            cell = row.createCell(11, CellType.STRING);
            cell.setCellValue("Thực lãnh");

            sheet.setColumnWidth(12, 8 * 256);
            cell = row.createCell(12, CellType.STRING);
            cell.setCellValue("Ghi chú");
            int count1 = 0;
            int rows = jTableBangLuong.getRowCount();
            for (int i = 0; i < rows; i++) {
                Object[] obj = {modelBangLuong.getValueAt(i, 1),
                    modelBangLuong.getValueAt(i, 2),
                    modelBangLuong.getValueAt(i, 3),
                    modelBangLuong.getValueAt(i, 4),
                    modelBangLuong.getValueAt(i, 5),
                    modelBangLuong.getValueAt(i, 6),
                    modelBangLuong.getValueAt(i, 7),
                    modelBangLuong.getValueAt(i, 8),
                    modelBangLuong.getValueAt(i, 9),
                    modelBangLuong.getValueAt(i, 10),
                    modelBangLuong.getValueAt(i, 11),};

                row = sheet.createRow(4 + i);

                cell = row.createCell(0, CellType.NUMERIC);
                cell.setCellValue(i + 1);

                cell = row.createCell(1, CellType.STRING);
                cell.setCellValue(obj[0].toString());

                cell = row.createCell(2, CellType.STRING);
                cell.setCellValue(obj[1].toString());

                cell = row.createCell(3, CellType.STRING);
                cell.setCellValue(obj[2].toString());

                cell = row.createCell(4, CellType.STRING);
                cell.setCellValue(obj[3].toString());

                cell = row.createCell(5, CellType.STRING);
                cell.setCellValue(obj[4].toString());

                cell = row.createCell(6, CellType.STRING);
                cell.setCellValue(obj[5].toString());

                cell = row.createCell(7, CellType.STRING);
                cell.setCellValue(obj[6].toString());

                cell = row.createCell(8, CellType.STRING);
                cell.setCellValue(obj[7].toString());

                cell = row.createCell(9, CellType.STRING);
                cell.setCellValue(obj[8].toString());

                cell = row.createCell(10, CellType.STRING);
                cell.setCellValue(obj[9].toString());

                cell = row.createCell(11, CellType.STRING);
                cell.setCellValue(obj[10].toString());

                //Tao bang luong cho moi nv
                // Create the company name row and merge cells
                row = sheet1.createRow(count1);
                cell = row.createCell(0, CellType.STRING);
                cell.setCellValue("Công ty TNHH may mặc Thịnh Vượng");
                cell.setCellStyle(style); // Apply the style to the cell
                sheet1.addMergedRegion(new CellRangeAddress(count1, count1, 0, 12)); // Merge cells from column 0 to 12
                count1++;
                // Create the title row and merge cells
                row = sheet1.createRow(count1);
                cell = row.createCell(0, CellType.STRING);
                cell.setCellValue(fileName);
                cell.setCellStyle(style); // Apply the style to the cell
                sheet1.addMergedRegion(new CellRangeAddress(count1, count1, 0, 12)); // Merge cells from column 0 to 12
                count1+=2;
                row = sheet1.createRow(count1);
                sheet1.setColumnWidth(0, 3 * 256);
                cell = row.createCell(0, CellType.STRING);
                cell.setCellValue("STT");

                sheet1.setColumnWidth(1, 20 * 256);
                cell = row.createCell(1, CellType.STRING);
                cell.setCellValue("Tên nhân viên");

                sheet1.setColumnWidth(2, 15 * 256);
                cell = row.createCell(2, CellType.STRING);
                cell.setCellValue("Ngày tính lương");

                sheet1.setColumnWidth(3, 15 * 256);
                cell = row.createCell(3, CellType.STRING);
                cell.setCellValue("Số ngày làm");

                sheet1.setColumnWidth(4, 15 * 256);
                cell = row.createCell(4, CellType.STRING);
                cell.setCellValue("Số ngày nghỉ");

                sheet1.setColumnWidth(5, 12 * 256);
                cell = row.createCell(5, CellType.STRING);
                cell.setCellValue("Lương chính");

                sheet1.setColumnWidth(6, 13 * 256);
                cell = row.createCell(6, CellType.STRING);
                cell.setCellValue("Lương tăng ca");

                sheet1.setColumnWidth(7, 12 * 256);
                cell = row.createCell(7, CellType.STRING);
                cell.setCellValue("Tiền ứng");

                sheet1.setColumnWidth(8, 12 * 256);
                cell = row.createCell(8, CellType.STRING);
                cell.setCellValue("Tiền phụ cấp");

                sheet1.setColumnWidth(9, 15 * 256);
                cell = row.createCell(9, CellType.STRING);
                cell.setCellValue("Tiền chuyên cần");

                sheet1.setColumnWidth(10, 15 * 256);
                cell = row.createCell(10, CellType.STRING);
                cell.setCellValue("Bảo hiểm xã hội");

                sheet1.setColumnWidth(11, 12 * 256);
                cell = row.createCell(11, CellType.STRING);
                cell.setCellValue("Thực lãnh");

                sheet1.setColumnWidth(12, 8 * 256);
                cell = row.createCell(12, CellType.STRING);
                cell.setCellValue("Ghi chú");
                
                count1++;
                row = sheet1.createRow(count1);
                
                cell = row.createCell(0, CellType.NUMERIC);
                cell.setCellValue(i + 1);

                cell = row.createCell(1, CellType.STRING);
                cell.setCellValue(obj[0].toString());

                cell = row.createCell(2, CellType.STRING);
                cell.setCellValue(obj[1].toString());

                cell = row.createCell(3, CellType.STRING);
                cell.setCellValue(obj[2].toString());

                cell = row.createCell(4, CellType.STRING);
                cell.setCellValue(obj[3].toString());

                cell = row.createCell(5, CellType.STRING);
                cell.setCellValue(obj[4].toString());

                cell = row.createCell(6, CellType.STRING);
                cell.setCellValue(obj[5].toString());

                cell = row.createCell(7, CellType.STRING);
                cell.setCellValue(obj[6].toString());

                cell = row.createCell(8, CellType.STRING);
                cell.setCellValue(obj[7].toString());

                cell = row.createCell(9, CellType.STRING);
                cell.setCellValue(obj[8].toString());

                cell = row.createCell(10, CellType.STRING);
                cell.setCellValue(obj[9].toString());

                cell = row.createCell(11, CellType.STRING);
                cell.setCellValue(obj[10].toString());
                count1+=2;
            }

            File f = new File("D://" + fileName + ".xlsx");
            try {
                FileOutputStream fis = new FileOutputStream(f);
                wordkbook.write(fis);
                fis.close();
            } catch (FileNotFoundException ex) {
                ex.printStackTrace();

            } catch (IOException ex) {
                ex.printStackTrace();
            }
            JOptionPane.showMessageDialog(this, "In thàng công");
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lõi mở file");
        }
    }//GEN-LAST:event_jButtonPDFActionPerformed

    private void jComboBoxThangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxThangActionPerformed
        //Sự kiện combobox tháng, khi nhấn vào 1 tháng thì reset lại bảng lương và bảng chấm công
//        ArrayList<NhanVienHanhChinh> ds = new ArrayList<NhanVienHanhChinh>();
//        String phongBan = jComboBoxPhongBan.getSelectedItem().toString();
//        for (NhanVienHanhChinh nv : dsNhanVien) {
//            if (checkBCCNV(nv.getMaNV())) {
//                if ((!phongBan.equals("Tất cả") && nv.getPhongBan().getTenPB().equals(phongBan))
//                        || (phongBan.equals("Tất cả"))) {
//                    ds.add(nv);
//                }
//            }
//        }
        resetTableNV(dsNhanVien);
//        resetTableBangChamCong(jTableNV.getSelectedRow());
//        resetTableBangLuong();
    }//GEN-LAST:event_jComboBoxThangActionPerformed

    private void jComboBoxNamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxNamActionPerformed
        //Sự kiện combobox tháng, khi nhấn vào 1 tháng thì reset lại bảng lương và bảng chấm công
        resetTableNV(dsNhanVien);
    }//GEN-LAST:event_jComboBoxNamActionPerformed

    private void jTextFieldTienUngActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldTienUngActionPerformed
        // Sự kiện khi nhập tiền ứng cho nv đang được chọn
        int row = jTableNV.getSelectedRow();
        double tienUng = Double.parseDouble(jTextFieldTienUng.getText());
        String maNV = modelNVHC.getValueAt(row, 0).toString();
        if (tienUng > timNVTheoMaNV(maNV).getLuongCoBan() / 2) {
            JOptionPane.showMessageDialog(null, "Tiền ứng của nhân viên không được lớn hơn 50% lương cơ bản");
            jTextFieldTienUng.requestFocus();
        } else {
            for (int i = 0; i < dstienUng.size(); i++) {
                dstienUng.put(maNV, tienUng);
            }
        }

    }//GEN-LAST:event_jTextFieldTienUngActionPerformed

    private void jTextFieldTienUngKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldTienUngKeyPressed
        // TODO add your handling code here:
//        int row = jTableNV.getSelectedRow();
//        double tienUng = Double.parseDouble(jTextFieldTienUng.getText());
//        String maNV = modelNVHC.getValueAt(row, 0).toString();
//        if (tienUng > timNVTheoMaNV(maNV).getLuongCoBan()) {
//            JOptionPane.showMessageDialog(null, "Tiền ứng của nhân viên không được lớn hơn lương cơ bản");
//            jTextFieldTienUng.requestFocus();
//        } else {
//            for (int i = 0; i < dstienUng.size(); i++) {
//                dstienUng.put(maNV, tienUng);
//            }
//        }
    }//GEN-LAST:event_jTextFieldTienUngKeyPressed

    private void jTextFieldTienUngFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldTienUngFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldTienUngFocusLost

    private void jTableNVMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableNVMouseClicked
        // TODO add your handling code here:
        int row = jTableNV.getSelectedRow();
        if (row != -1) {
//            resetTableBangLuong();
            clearText();
        }
        int coBangLuong = 0;
        for (int i = 0; i < modelBangLuong.getRowCount(); i++) {
            if (modelNVHC.getValueAt(row, 0).equals(modelBangLuong.getValueAt(i, 0).toString().substring(4, 10))) {
                jTableBangLuong.setRowSelectionInterval(i, i);
                resetTextField();
                coBangLuong = 1;
                break;
            }
        }
        if (coBangLuong == 0) {
            jTableBangLuong.clearSelection();
        }
        resetTableBangChamCong(row);
    }//GEN-LAST:event_jTableNVMouseClicked

    private void jTableBangLuongMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableBangLuongMouseClicked
        // Sự kiện click vào table bảng lương => chọn nv tương ứng bên table nhân viên
        resetTextField();
        String maNV = modelBangLuong.getValueAt(jTableBangLuong.getSelectedRow(), 0).toString().substring(4, 10);
//        System.out.println("gui.GDTinhLuongNV.jTableBangLuongMouseClicked() " + maNV);
        for (int i = 0; i < modelNVHC.getRowCount(); i++) {
            if (maNV.equals(modelNVHC.getValueAt(i, 0).toString())) {
                jTableNV.setRowSelectionInterval(i, i);
                resetTableBangChamCong(jTableNV.getSelectedRow());
                break;
            }
        }
        if (evt.getClickCount() == 2) {
            PrintReviewNV printReviewNV = new PrintReviewNV();
            int i = jTableBangLuong.getSelectedRow();
            Object[] obj = {
                modelBangLuong.getValueAt(i, 0),
                modelBangLuong.getValueAt(i, 1),
                modelBangLuong.getValueAt(i, 2),
                modelBangLuong.getValueAt(i, 3),
                modelBangLuong.getValueAt(i, 4),
                modelBangLuong.getValueAt(i, 5),
                modelBangLuong.getValueAt(i, 6),
                modelBangLuong.getValueAt(i, 7),
                modelBangLuong.getValueAt(i, 8),
                modelBangLuong.getValueAt(i, 9),
                modelBangLuong.getValueAt(i, 10),
                modelBangLuong.getValueAt(i, 11),};
            printReviewNV.setGiaTri(obj);
            JDialog dialog = new JDialog();
            dialog.setTitle("Print review");
            dialog.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/image/logo.png")));
            dialog.getContentPane().add(printReviewNV);
            dialog.pack();
            dialog.setLocationRelativeTo(null);
            dialog.setVisible(true);
        }
    }//GEN-LAST:event_jTableBangLuongMouseClicked

    private void jTextFieldTimKiemFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldTimKiemFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldTimKiemFocusLost

    private void jTextFieldTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldTimKiemActionPerformed
        // TODO add your handling code here:
        jButtonTimKiem.doClick();
    }//GEN-LAST:event_jTextFieldTimKiemActionPerformed

    private void jTextFieldTimKiemKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldTimKiemKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldTimKiemKeyPressed

    private void jButtonTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTimKiemActionPerformed
        // TODO add your handling code here:
        ArrayList<NhanVienHanhChinh> ds = new ArrayList<NhanVienHanhChinh>();
        Pattern pattern = Pattern.compile(jTextFieldTimKiem.getText(), Pattern.CASE_INSENSITIVE);

        String stringTimKiem = jTextFieldTimKiem.getText().trim();
        for (NhanVienHanhChinh nv : dsNhanVien) {
            Matcher matcher = pattern.matcher(nv.getMaNV());
            if (matcher.find()) {
//                System.out.println("Match found: " + str);
                ds.add(nv);
            }
            matcher = pattern.matcher(nv.getHoTen());
            if (matcher.find()) {
//                System.out.println("Match found: " + str);
                ds.add(nv);
            }
//            if (nv.getMaNV().equalsIgnoreCase(stringTimKiem)
//                    || nv.getHoTen().equalsIgnoreCase(stringTimKiem)) {
//
//            }
        }
        resetTableNV(ds);
//        resetTableBangLuong();
//        resetTableBangChamCong(-1);
    }//GEN-LAST:event_jButtonTimKiemActionPerformed

    private void jButtonLamMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLamMoiActionPerformed
        // TODO add your handling code here:
//        modelNVHC.setRowCount(ABORT);
//        resetTableNV(dsNhanVien);
        jTextFieldTimKiem.setText("");
        jComboBoxPhongBan.setSelectedIndex(0);
//        if (isAllChoosen) {
//
//        }
//        resetTableBangLuong();
//        resetTableBangChamCong(-1);
    }//GEN-LAST:event_jButtonLamMoiActionPerformed

    private void jComboBoxPhongBanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxPhongBanActionPerformed
        // TODO add your handling code here:
        resetTableNV(dsNhanVien);
//        jTableNV.setRowSelectionInterval(0, 0);
//        resetTableBangLuong();
//        resetTableBangChamCong(0);
//        resetTextField();
        clearText();

    }//GEN-LAST:event_jComboBoxPhongBanActionPerformed

    private void jComboBoxPhongBanItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxPhongBanItemStateChanged
        // TODO add your handling code here:


    }//GEN-LAST:event_jComboBoxPhongBanItemStateChanged

    //Load model table nhân viên
    void loadComponentsTableNV() {
        modelNVHC = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                // all cells false
                return false;
            }
        };
        modelNVHC.addColumn("Mã NV");
        modelNVHC.addColumn("Tên NV");
        jTableNV.setModel(modelNVHC);
        jTableNV.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    int selectedRow = jTableNV.getSelectedRow();
                }
            }
        });
    }

    //Load model của table bảng chấm công 
    void loadComponentsTableBangChamCong() {
        String[] headers = {"Mã bảng chấm công", "Giờ vào", "Giờ ra", "Ngày chấm công", "Ca làm việc"};
        modelBangChamCong = new DefaultTableModel(headers, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                // all cells false
                return false;
            }
        };
        jTableBangChamCong.setModel(modelBangChamCong);
    }

    //Load model của table bảng lương
    void loadComponentsTableBangLuong() {
        String[] headers = {"Mã bảng lương", "Tên nhân viên", "Ngày tính lương", "Số ngày làm", "Số ngày nghỉ", "Lương chính", "Lương tăng ca", "Tiền ứng", "Tiền phụ cấp", "Tiền chuyên cần", "BHXH", "Thực lãnh"};
        modelBangLuong = new DefaultTableModel(headers, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                // all cells false
                return false;
            }
        };
        jTableBangLuong.setModel(modelBangLuong);
    }

    //reset model nhân viên 
    void resetTableNV(ArrayList<NhanVienHanhChinh> ds) {
        boolean isEqual = ds.equals(dsNhanVienTmp);
        String phongBan = jComboBoxPhongBan.getSelectedItem().toString();
        modelNVHC.setRowCount(0);
        for (NhanVienHanhChinh nv : ds) {
//                JOptionPane.showMessageDialog(null, nv.getHoTen());
            if (checkBCCNV(nv.getMaNV())) {

                if ((!phongBan.equals("Tất cả") && nv.getPhongBan().getTenPB().equals(phongBan))
                        || (phongBan.equals("Tất cả"))) {
                    Object[] arr = {nv.getMaNV(), nv.getHoTen(), false};
                    modelNVHC.addRow(arr);
                }
            }
        }
        dsNhanVienTmp = ds;
        if (jTableNV.getRowCount() > 0) {
            resetTableBangChamCong(0);

        } else {
            resetTableBangChamCong(-1);
        }
        resetTableBangLuong();
        clearText();
    }

    //reset table bang chấm công theo nhân viên đang được chọn 
    void resetTableBangChamCong(int row) {
        if (row != -1) { //Nếu có nhân viên được chọn
//            NhanVienHanhChinh nv = timNVTheoMaNV();
            String month = jComboBoxThang.getSelectedItem().toString().trim();
            String year = jComboBoxNam.getSelectedItem().toString().trim();
            modelBangChamCong.setRowCount(0);
            //Lấy ra danh sách bảng chấm công tháng đó của nhân viên được chọn trên table
            for (BangChamCongNhanVien bcc : dsBangChamCong) {
                if (bcc.getNv().getMaNV().equalsIgnoreCase(modelNVHC.getValueAt(row, 0).toString())
                        && bcc.getNgayChamCong().getMonthValue() == stringToInt(month)
                        && bcc.getNgayChamCong().getYear() == stringToInt(year)) {
                    Object[] arr = {bcc.getMaBangChamCong(), bcc.getGioVao().toString(), bcc.getGioRa().toString(), bcc.getNgayChamCong().format(dateTimeFormatter), bcc.getCaLamViec()};
                    modelBangChamCong.addRow(arr);
                }
            }
        } else {
            modelBangChamCong.setRowCount(0);
        }
    }

    //reset table lương theo các nhân viên đang được chọn 
    void resetTableBangLuong() {
        modelBangLuong.setRowCount(0); //reset model bảng lương
        String month = jComboBoxThang.getSelectedItem().toString().trim(); //Lấy ra tháng
        String year = jComboBoxNam.getSelectedItem().toString().trim(); //Lấy ra năm
        Locale vietNam = new Locale("vi", "VN");
        NumberFormat numberFormat = NumberFormat.getInstance(vietNam);
        numberFormat.setMaximumFractionDigits(0); //Format tiền vnd
        int rows = jTableNV.getRowCount();
        for (int i = 0; i < rows; i++) {
            String maNV = modelNVHC.getValueAt(i, 0).toString();
            if (timBangLuongTheoMaNV(maNV) != null) {
                BangLuongNhanVien bangLuong = timBangLuongTheoMaNV(maNV);
                Object[] arr = {bangLuong.getMaBangLuong(),
                    bangLuong.getNv().getHoTen(),
                    bangLuong.getNgayTinhLuong().format(dateTimeFormatter),
                    bangLuong.getSoNgayLam(),
                    bangLuong.getSoNgayNghi(),
                    numberFormat.format(bangLuong.getLuongChinh()) + " ₫",
                    numberFormat.format(bangLuong.getLuongTangCa()) + " ₫",
                    numberFormat.format(bangLuong.getTienUng()) + " ₫",
                    numberFormat.format(bangLuong.getTienPhuCap()) + " ₫",
                    numberFormat.format(bangLuong.getTienChuyenCan()) + " ₫",
                    numberFormat.format(bangLuong.getBaoHiemXaHoi()) + " ₫",
                    numberFormat.format(bangLuong.getThucLanh()) + " ₫"};
                modelBangLuong.addRow(arr);
            }

        }
    }

    //Đổi string qua int
    public int stringToInt(String s) {
        int foo;
        try {
            foo = Integer.parseInt(s);
        } catch (NumberFormatException e) {
            foo = 0;
        }
        return foo;
    }

    //Hàm tính giờ tăng ca
    public double tinhGioTangCa(LocalTime gioVao, LocalTime gioRa) {
        Duration duration = Duration.between(gioVao, gioRa);
        long hours = duration.toHours();
        int minutes = duration.toMinutesPart();
        double totalHours = hours + minutes / 60.0;
//        JOptionPane.showMessageDialog(null, totalHours);
        return totalHours;
    }

    //Tính lương cho 1 nhân viên
    public BangLuongNhanVien tinhLuong(ArrayList<BangChamCongNhanVien> dsBangChamCong, NhanVienHanhChinh nv) {
        BangLuongNhanVien bangLuong = null; //Khởi tạo bảng lương bằng null
        int year = stringToInt(jComboBoxNam.getSelectedItem().toString().trim()); //Lấy năm từ combobox
        int month = stringToInt(jComboBoxThang.getSelectedItem().toString().trim()); //Lấy month từ combobox
        YearMonth yearMonthObject = YearMonth.of(year, month);
        int daysInMonth = yearMonthObject.lengthOfMonth();//Lấy ra số ngày của tháng đó 
        int soGioTangCaNgayThuong = 0; //Số giờ tăng ca ngày thường (T2-T7)
        int soGioLamNgayNghi = 0; //Số giờ làm ca cn (CN)
        int soGioLamNgayLe = 0; //Số giờ làm ngày lễ (các ngày nghỉ the quy định nhà nước)
        int soNgayLamCNVaLe = 0;
        int soNgayLam = 0, soNgayNghi = 0; //Số ngày làm và số ngày nghỉ
        double tienUng = dstienUng.get(nv.getMaNV()); //Lấy ra tiền ứng của nhân viên
        String maBangLuong = Integer.toString(year).substring(2) + (month < 10 ? "0" + Integer.toString(month) : Integer.toString(month)) + nv.getMaNV();
        //Nếu nhân viên đã có lương thì không thực hiện tính nữa
//        if (bangLuongNhanVien_dao.getBangLuongNhanVienTheoMa(maBangLuong) != null) {
//        } else { //Nếu tháng đó chưa có lương
        //Lấy ra bảng chấm công của nhân viên từ danh sách bảng chấm công của tất cả nhân viên
        ArrayList<BangChamCongNhanVien> ds = new ArrayList<BangChamCongNhanVien>();
        for (BangChamCongNhanVien bcc : dsBangChamCong) {
            if (bcc.getNv().getMaNV().equalsIgnoreCase(nv.getMaNV())) {
                //Lọc ra các bảng chấm công trong tháng và năm được chọn tren combobox
                if (bcc.getNgayChamCong().getMonthValue() == month && bcc.getNgayChamCong().getYear() == year) {
//                        System.out.println("gui.GDTinhLuongNV.tinhLuong()" + month + year);
                    ds.add(bcc);
                }
            }
        }

        //Nếu nhân viên đó không có thông tin chấm công trong tháng đó
        if (ds.size() == 0) {
//                JOptionPane.showMessageDialog(null, "Nhân viên này ko có thông tin chấm công");
            return null;
        }

        for (BangChamCongNhanVien bcc : ds) {
            //Tính giờ làm nếu là chủ nhật
            if (bcc.getCaLamViec().equalsIgnoreCase("ca chủ nhật")
                    || bcc.getCaLamViec().equalsIgnoreCase("ca CN")) {
                soGioLamNgayNghi += tinhGioTangCa(bcc.getGioVao(), bcc.getGioRa());
                soNgayLamCNVaLe++;
            } else if (bcc.getCaLamViec().equalsIgnoreCase("ca ngày lễ")
                    || bcc.getCaLamViec().equalsIgnoreCase("ngày lễ")) {
                soGioLamNgayLe += tinhGioTangCa(bcc.getGioVao(), bcc.getGioRa());
                soNgayLamCNVaLe++;
            } else //Nếu là ngày thường T2-T7
            {
                double gioTangCa = tinhGioTangCa(LocalTime.parse("17:00"), bcc.getGioRa());
                if (gioTangCa > 0) {
                    soGioTangCaNgayThuong += gioTangCa;
                }

            }
            soNgayLam++;
        }

        bangLuong = new BangLuongNhanVien(maBangLuong, LocalDateTime.now(), soNgayLam - soNgayLamCNVaLe, daysInMonth - soNgayLam, tienUng, nv);
        bangLuong.setSoNgayLam(soNgayLam);
        bangLuong.setLuongTangCa(soGioTangCaNgayThuong, 1.5);
        bangLuong.setLuongTangCa(soGioLamNgayNghi, 2);
        bangLuong.setLuongTangCa(soGioLamNgayLe, 3);
//            JOptionPane.showMessageDialog(null, bangLuong.toString());
//        }
        return bangLuong;
    }

    //Tìm bảng lương theo mã của nhân viên 
    public BangLuongNhanVien timBangLuongTheoMaNV(String maNV) {
        BangLuongNhanVien bangLuong = null;
        for (BangLuongNhanVien bl : dsAllBangLuong) {
            if (bl.getNv().getMaNV().equalsIgnoreCase(maNV)
                    && bl.getMaBangLuong().substring(0, 2).equalsIgnoreCase(jComboBoxNam.getSelectedItem().toString().substring(2))
                    && bl.getMaBangLuong().substring(2, 4).equalsIgnoreCase(String.format("%02d", stringToInt(jComboBoxThang.getSelectedItem().toString())))) {
                bangLuong = bl;
                break;
            }
        }
        return bangLuong;
    }

    //Reset lại các textfield khi nhấn vào một nhân viên
    public void resetTextField() {
        int row = jTableBangLuong.getSelectedRow();
        if (row != -1) {
            jTextFieldTenNV.setText(modelBangLuong.getValueAt(row, 1).toString());
            jTextFieldNgayTinhLuong.setText(modelBangLuong.getValueAt(row, 2).toString());
            jTextFieldSoNgayLam.setText(modelBangLuong.getValueAt(row, 3).toString());
            jTextFieldSoNgayNghi.setText(modelBangLuong.getValueAt(row, 4).toString());
            jTextFieldBHXH.setText(modelBangLuong.getValueAt(row, 10).toString());
            jTextFieldChuyenCan.setText(modelBangLuong.getValueAt(row, 9).toString());
            jTextFieldLuongChinh.setText(modelBangLuong.getValueAt(row, 5).toString());
            jTextFieldPhuCap.setText(modelBangLuong.getValueAt(row, 8).toString());
            jTextFieldTangCa.setText(modelBangLuong.getValueAt(row, 6).toString());
            jTextFieldTienUng.setText(modelBangLuong.getValueAt(row, 7).toString());
            jTextFieldThucLanh.setText(modelBangLuong.getValueAt(row, 11).toString());
        }
    }

    public void clearText() {
        int row = jTableNV.getSelectedRow();
        String tienUng = "0.0";
        if (row != -1) {
            tienUng = dstienUng.get(modelNVHC.getValueAt(row, 0).toString()).toString();
        }
        jTextFieldTenNV.setText("");
        jTextFieldBHXH.setText("");
        jTextFieldChuyenCan.setText("");
        jTextFieldLuongChinh.setText("");
        jTextFieldPhuCap.setText("");
        jTextFieldNgayTinhLuong.setText("");
        jTextFieldSoNgayLam.setText("");
        jTextFieldSoNgayNghi.setText("");
        jTextFieldTangCa.setText("");
        jTextFieldTienUng.setText(tienUng);
        jTextFieldThucLanh.setText("");
    }

    void createPDF(String fileName, Object[] bangLuong, String tenNV) {

    }

    public void resetHashMapAndPhongBan() {
        //Khởi tạo ds tiền ứng cho các nv là 0
        for (NhanVienHanhChinh nv : dsNhanVien) {
            dstienUng.put(nv.getMaNV(), 0.0);
        }
        //Khởi tạo giá trị cho combobox phòng ban
        jComboBoxPhongBan.addItem("Tất cả");
        jComboBoxPhongBan.addItem("Phòng nhân sự");
        jComboBoxPhongBan.addItem("Phòng kế toán");
        jComboBoxPhongBan.addItem("Phòng điều hành phân xưởng");
    }

    public boolean checkBCCNV(String maNV) {
        int year = stringToInt(jComboBoxNam.getSelectedItem().toString().trim()); //Lấy năm từ combobox
        int month = stringToInt(jComboBoxThang.getSelectedItem().toString().trim()); //Lấy month từ combobox
        for (BangChamCongNhanVien bcc : dsBangChamCong) {
            if (bcc.getNv().getMaNV().equalsIgnoreCase(maNV)) {
                //Lọc ra các bảng chấm công trong tháng và năm được chọn tren combobox
                if (bcc.getNgayChamCong().getMonthValue() == month
                        && bcc.getNgayChamCong().getYear() == year) {
                    return true;
                }
            }
        }

        return false;
    }

    public NhanVienHanhChinh timNVTheoMaNV(String maNV) {
        NhanVienHanhChinh res = null;
        for (NhanVienHanhChinh nv : dsNhanVien) {
            if (nv.getMaNV().equalsIgnoreCase(maNV)) {
                res = nv;
                break;
            }
        }
        return res;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonLamMoi;
    private javax.swing.JButton jButtonPDF;
    private javax.swing.JButton jButtonTimKiem;
    private javax.swing.JButton jButtonTinhLuong;
    private javax.swing.JComboBox<String> jComboBoxNam;
    private javax.swing.JComboBox<String> jComboBoxPhongBan;
    private javax.swing.JComboBox<String> jComboBoxThang;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabelBHXH;
    private javax.swing.JLabel jLabelChuyenCan;
    private javax.swing.JLabel jLabelLuongChinh;
    private javax.swing.JLabel jLabelLuongChinh2;
    private javax.swing.JLabel jLabelNam;
    private javax.swing.JLabel jLabelNgayTinhLuong;
    private javax.swing.JLabel jLabelPhongBan;
    private javax.swing.JLabel jLabelPhuCap;
    private javax.swing.JLabel jLabelSoNgayLam;
    private javax.swing.JLabel jLabelSoNgayNghi;
    private javax.swing.JLabel jLabelTangCa;
    private javax.swing.JLabel jLabelTenNV;
    private javax.swing.JLabel jLabelThang;
    private javax.swing.JLabel jLabelThucLanh;
    private javax.swing.JLabel jLabelTienUng;
    private javax.swing.JLabel jLabelTimKiem;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelDSNV;
    private javax.swing.JPanel jPanelLuong;
    private javax.swing.JPanel jPanelThongTinLuong;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTableBangChamCong;
    private javax.swing.JTable jTableBangLuong;
    private javax.swing.JTable jTableNV;
    private javax.swing.JTextField jTextFieldBHXH;
    private javax.swing.JTextField jTextFieldChuyenCan;
    private javax.swing.JTextField jTextFieldLuongChinh;
    private javax.swing.JTextField jTextFieldLuongChinh2;
    private javax.swing.JTextField jTextFieldNgayTinhLuong;
    private javax.swing.JTextField jTextFieldPhuCap;
    private javax.swing.JTextField jTextFieldSoNgayLam;
    private javax.swing.JTextField jTextFieldSoNgayNghi;
    private javax.swing.JTextField jTextFieldTangCa;
    private javax.swing.JTextField jTextFieldTenNV;
    private javax.swing.JTextField jTextFieldThucLanh;
    private javax.swing.JTextField jTextFieldTienUng;
    private javax.swing.JTextField jTextFieldTimKiem;
    private javax.swing.JPanel pTinhLuongNV;
    private javax.swing.JPanel pTittle;
    private javax.swing.JPanel pTongQuan;
    // End of variables declaration//GEN-END:variables
    private NhanVienHanhChinh_DAO nhanVien_dao;
    private BangChamCongNhanVien_DAO bangChamCong_dao;
    private BangLuongNhanVien_DAO bangLuongNhanVien_dao;
    private DefaultTableModel modelNVHC;
    private DefaultTableModel modelBangChamCong;
    private DefaultTableModel modelBangLuong;
    private ArrayList<BangChamCongNhanVien> dsBangChamCong;
    private ArrayList<BangLuongNhanVien> dsAllBangLuong;
    private ArrayList<NhanVienHanhChinh> dsNhanVien;
    private ArrayList<NhanVienHanhChinh> dsNhanVienTmp;
    private Boolean isAllChoosen = false;
    private Map<String, Double> dstienUng;
//    private Map<String, Boolean> dsNvDuocChon;
    private DateTimeFormatter dateTimeFormatter;
}
